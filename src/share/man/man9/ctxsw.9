.\"	$NetBSD: ctxsw.9,v 1.17 2003/05/13 09:59:27 wiz Exp $
.\"
.\" Copyright (c) 1996, 2002 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Paul Kranenburg.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 13, 2003
.Dt CTXSW 9
.Os
.Sh NAME
.Nm mi_switch ,
.Nm cpu_switch
.Nd switch to another light weight process
.Sh SYNOPSIS
.Ft int
.Fn mi_switch "struct lwp *cur" "struct lwp *new"
.Ft int
.Fn cpu_switch "struct lwp *cur" "struct lwp *new"
.Sh DESCRIPTION
The
.Fn mi_switch
function implements the machine-independent prelude to an LWP
context switch.
It is called from only a few distinguished places in the kernel code
as a result of the principle of non-preemptable kernel mode execution.
The three major uses of
.Fn mi_switch
can be enumerated as follows:
.Bl -enum -offset indent
.It
From within
.Xr tsleep 9
when the current LWP voluntarily relinquishes the CPU to wait for
some resource to become available.
.It
From within
.Xr preempt 9
when the current LWP voluntarily relinquishes the CPU or when the
kernel prepares a return to user-mode execution.
.It
In the signal handling code
if a signal is delivered that causes an LWP to stop
.Pq see Xr issignal 9 .
.El
.Pp
.Fn mi_switch
records the amount of time the current LWP has been running in the
LWP structure and checks this value against the CPU time limits
allocated to the LWP
.Pq see Xr getrlimit 2 .
Exceeding the soft limit results in a
.Dv SIGXCPU
signal to be posted to the LWP, while exceeding the hard limit will
cause a
.Dv SIGKILL .
If
.Fa newp
is
.Dv NULL ,
.Fn mi_switch
will invoke
.Xr chooseproc 9
to select a new LWP from the system run queue.
If the new LWP is the same as the current LWP, then control is
returned immediately to the LWP, avoiding any unnecessary overhead
associated with switching in a new LWP.
Otherwise,
.Fn mi_switch
hands over control to the machine-dependent function
.Fn cpu_switch ,
which will perform the actual LWP context switch.
.Pp
The
.Fn cpu_switch
function switches the new LWP onto the CPU.
This procedure is performed by saving the LWP context of the current
LWP in its process control block (PCB) and restoring the LWP
context of the new LWP.
The address space of the new LWP is activated using
.Fn pmap_activate
(see
.Xr pmap 9 ) .
Finally, the new LWP is checked to see if it was previously
preempted while inside a restartable atomic sequence
.Pq see Xr ras 9 .
.Pp
These functions must be called with the scheduler lock held
(see
.Xr SCHED_LOCK 9 )
and at the
.Xr splsched 9
interrupt protection level.
Both functions return with the scheduler lock released.
.Sh RETURN VALUES
These functions return 1 if a context switch was performed to a different
LWP, 0 otherwise.
.Sh SEE ALSO
.Xr SCHED_LOCK 9 ,
.Xr chooseproc 9 ,
.Xr pmap 9 ,
.Xr ras 9 ,
.Xr splsched 9 ,
.Xr tsleep 9 ,
.Xr wakeup 9
