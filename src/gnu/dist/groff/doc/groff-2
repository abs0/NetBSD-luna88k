This is groff, produced by makeinfo version 4.6 from ./groff.texinfo.

This manual documents GNU `troff' version 1.19.

   Copyright (C) 1994-2000, 2001, 2002, 2003, 2004 Free Software
Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being `A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     `GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: `You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
   
INFO-DIR-SECTION Typesetting
START-INFO-DIR-ENTRY
* Groff: (groff).               The GNU troff document formatting system.
END-INFO-DIR-ENTRY


File: groff,  Node: Diversions,  Next: Environments,  Prev: Traps,  Up: gtroff Reference

Diversions
==========

In `gtroff' it is possible to "divert" text into a named storage area.
Due to the similarity to defining macros it is sometimes said to be
stored in a macro.  This is used for saving text for output at a later
time, which is useful for keeping blocks of text on the same page,
footnotes, tables of contents, and indices.

   For orthogonality it is said that `gtroff' is in the "top-level
diversion" if no diversion is active (i.e., the data is diverted to the
output device).

 - Request: .di macro
 - Request: .da macro
     Begin a diversion.  Like the `de' request, it takes an argument of
     a macro name to divert subsequent text into.  The `da' macro
     appends to an existing diversion.

     `di' or `da' without an argument ends the diversion.

 - Request: .box macro
 - Request: .boxa macro
     Begin (or appends to) a diversion like the `di' and `da' requests.
     The difference is that `box' and `boxa' do not include a
     partially-filled line in the diversion.

     Compare this:


          Before the box.
          .box xxx
          In the box.
          .br
          .box
          After the box.
          .br
              => Before the box.  After the box.
          .xxx
              => In the box.

     with this:


          Before the diversion.
          .di yyy
          In the diversion.
          .br
          .di
          After the diversion.
          .br
              => After the diversion.
          .yyy
              => Before the diversion.  In the diversion.

     `box' or `boxa' without an argument ends the diversion.

 - Register: \n[.z]
 - Register: \n[.d]
     Diversions may be nested.  The read-only number register `.z'
     contains the name of the current diversion (this is a string-valued
     register).  The read-only number register `.d' contains the current
     vertical place in the diversion.  If not in a diversion it is the
     same as register `nl'.

 - Register: \n[.h]
     The "high-water mark" on the current page.  It corresponds to the
     text baseline of the lowest line on the page.  This is a read-only
     register.


          .tm .h==\n[.h], nl==\n[nl]
              => .h==0, nl==-1
          This is a test.
          .br
          .sp 2
          .tm .h==\n[.h], nl==\n[nl]
              => .h==40, nl==120

     As can be seen in the previous example, empty lines are not
     considered in the return value of the `.h' register.

 - Register: \n[dn]
 - Register: \n[dl]
     After completing a diversion, the read-write number registers `dn'
     and `dl' contain the vertical and horizontal size of the diversion.
     Note that only the just processed lines are counted: For the
     computation of `dn' and `dl', the requests `da' and `boxa' are
     handled as if `di' and `box' had been used - lines which have been
     already stored in a macro are not taken into account.


          .\" Center text both horizontally & vertically
          .
          .\" Enclose macro definitions in .eo and .ec
          .\" to avoid the doubling of the backslash
          .eo
          .\" macro .(c starts centering mode
          .de (c
          .  br
          .  ev (c
          .  evc 0
          .  in 0
          .  nf
          .  di @c
          ..


          .\" macro .)c terminates centering mode
          .de )c
          .  br
          .  ev
          .  di
          .  nr @s (((\n[.t]u - \n[dn]u) / 2u) - 1v)
          .  sp \n[@s]u
          .  ce 1000
          .  @c
          .  ce 0
          .  sp \n[@s]u
          .  br
          .  fi
          .  rr @s
          .  rm @s
          .  rm @c
          ..
          .\" End of macro definitions, restore escape mechanism
          .ec


 - Escape: \!
 - Escape: \?anything\?
     Prevent requests, macros, and escapes from being interpreted when
     read into a diversion.  Both escapes take the given text and
     "transparently" embed it into the diversion.  This is useful for
     macros which shouldn't be invoked until the diverted text is
     actually output.

     The `\!' escape transparently embeds text up to and including the
     end of the line.  The `\?' escape transparently embeds text until
     the next occurrence of the `\?' escape.  Example:


          \?ANYTHING\?

     ANYTHING may not contain newlines; use `\!'  to embed newlines in
     a diversion.  The escape sequence `\?' is also recognized in copy
     mode and turned into a single internal code; it is this code that
     terminates ANYTHING.  Thus the following example prints 4.


          .nr x 1
          .nf
          .di d
          \?\\?\\\\?\\\\\\\\nx\\\\?\\?\?
          .di
          .nr x 2
          .di e
          .d
          .di
          .nr x 3
          .di f
          .e
          .di
          .nr x 4
          .f

     Both escapes read the data in copy mode.

     If `\!' is used in the top-level diversion, its argument is
     directly embedded into the `gtroff' intermediate output.  This can
     be used for example to control a postprocessor which processes the
     data before it is sent to the device driver.

     The `\?' escape used in the top-level diversion produces no output
     at all; its argument is simply ignored.

 - Request: .output string
     Emit STRING directly to the `gtroff' intermediate output (subject
     to copy-mode interpretation); this is similar to `\!' used at the
     top level.  An initial double quote in STRING is stripped off to
     allow initial blanks.

     This request can't be used before the first page has started - if
     you get an error, simply insert `.br' before the `output' request.

     Without argument, `output' is ignored.

     Use with caution!  It is normally only needed for mark-up used by a
     postprocessor which does something with the output before sending
     it to the output device, filtering out STRING again.

 - Request: .asciify div
     "Unformat" the diversion specified by DIV in such a way that ASCII
     characters, characters translated with the `trin' request, space
     characters, and some escape sequences that were formatted and
     diverted are treated like ordinary input characters when the
     diversion is reread.  It can be also used for gross hacks; for
     example, the following sets register `n' to 1.


          .tr @.
          .di x
          @nr n 1
          .br
          .di
          .tr @@
          .asciify x
          .x

     *Note Copy-in Mode::.

 - Request: .unformat div
     Like `asciify', unformat the specified diversion.  However,
     `unformat' only unformats spaces and tabs between words.
     Unformatted tabs are treated as input tokens, and spaces are
     stretchable again.

     The vertical size of lines is not preserved; glyph information
     (font, font size, space width, etc.) is retained.


File: groff,  Node: Environments,  Next: Suppressing output,  Prev: Diversions,  Up: gtroff Reference

Environments
============

It happens frequently that some text should be printed in a certain
format regardless of what may be in effect at the time, for example, in
a trap invoked macro to print headers and footers.  To solve this
`gtroff' processes text in "environments".  An environment contains
most of the parameters that control text processing.  It is possible to
switch amongst these environments; by default `gtroff' processes text
in environment 0.  The following is the information kept in an
environment.

   * font parameters (size, family, style, glyph height and slant, space
     and sentence space size)

   * page parameters (line length, title length, vertical spacing, line
     spacing, indentation, line numbering, centering, right-justifying,
     underlining, hyphenation data)

   * fill and adjust mode

   * tab stops, tab and leader characters, escape character, no-break
     and hyphen indicators, margin character data

   * partially collected lines

   * input traps

   * drawing and fill colours

   These environments may be given arbitrary names (see *Note
Identifiers::, for more info).  Old versions of `troff' only had
environments named `0', `1', and `2'.

 - Request: .ev [env]
 - Register: \n[.ev]
     Switch to another environment.  The argument ENV is the name of
     the environment to switch to.  With no argument, `gtroff' switches
     back to the previous environment.  There is no limit on the number
     of named environments; they are created the first time that they
     are referenced.  The `.ev' read-only register contains the name or
     number of the current environment.  This is a string-valued
     register.

     Note that a call to `ev' (with argument) pushes the previously
     active environment onto a stack.  If, say, environments `foo',
     `bar', and `zap' are called (in that order), the first `ev'
     request without parameter switches back to environment `bar'
     (which is popped off the stack), and a second call switches back
     to environment `foo'.

     Here is an example:


          .ev footnote-env
          .fam N
          .ps 6
          .vs 8
          .ll -.5i
          .ev
          
          ...
          
          .ev footnote-env
          \(dg Note the large, friendly letters.
          .ev


 - Request: .evc env
     Copy the environment ENV into the current environment.

     The following environment data is not copied:

        * Partially filled lines.

        * The status whether the previous line was interrupted.

        * The number of lines still to center, or to right-justify, or
          to underline (with or without underlined spaces); they are
          set to zero.

        * The status whether a temporary indent is active.

        * Input traps and its associated data.

        * Line numbering mode is disabled; it can be reactivated with
          `.nm +0'.

        * The number of consecutive hyphenated lines (set to zero).

 - Register: \n[.w]
 - Register: \n[.cht]
 - Register: \n[.cdp]
 - Register: \n[.csk]
     The `\n[.w]' register contains the width of the last glyph added
     to the current environment.

     The `\n[.cht]' register contains the height of the last glyph
     added to the current environment.

     The `\n[.cdp]' register contains the depth of the last glyph added
     to the current environment.  It is positive for glyphs extending
     below the baseline.

     The `\n[.csk]' register contains the "skew" (how far to the right
     of the glyph's center that `gtroff' should place an accent) of the
     last glyph added to the current environment.

 - Register: \n[.n]
     The `\n[.n]' register contains the length of the previous output
     line in the current environment.


File: groff,  Node: Suppressing output,  Next: Colors,  Prev: Environments,  Up: gtroff Reference

Suppressing output
==================

 - Escape: \Onum
     Disable or enable output depending on the value of NUM:

    `\O0'
          Disable any glyphs from being emitted to the device driver,
          provided that the escape occurs at the outer level (see
          `\O[3]' and `\O[4]').  Motion is not suppressed so
          effectively `\O[0]' means _pen up_.

    `\O1'
          Enable output of glyphs, provided that the escape occurs at
          the outer level.

     `\O0' and `\O1' also reset the four registers `opminx', `opminy',
     `opmaxx', and `opmaxy' to -1.  *Note Register Index::.  These four
     registers mark the top left and bottom right hand corners of a box
     which encompasses all written glyphs.

     For example the input text:


          Hello \O[0]world \O[1]this is a test.

     produces the following output:


          Hello       this is a test.

    `\O2'
          Provided that the escape occurs at the outer level, enable
          output of glyphs and also write out to `stderr' the page
          number and four registers encompassing the glyphs previously
          written since the last call to `\O'.

    `\O3'
          Begin a nesting level.  At start-up, `gtroff' is at outer
          level.

    `\O4'
          End a nesting level.

    `\O[5PFILENAME]'
          This escape is `grohtml' specific.  Provided that this escape
          occurs at the outer nesting level write the `filename' to
          `stderr'.  The position of the image, P, must be specified
          and must be one of `l', `r', `c', or `i' (left, right,
          centered, inline).  FILENAME will be associated with the
          production of the next inline image.


File: groff,  Node: Colors,  Next: I/O,  Prev: Suppressing output,  Up: gtroff Reference

Colors
======

 - Request: .color [n]
 - Register: \n[.color]
     If N is missing or non-zero, activate colors (this is the default);
     otherwise, turn it off.

     The read-only number register `.color' is 1 if colors are active,
     0 otherwise.

     Internally, `color' sets a global flag; it does not produce a
     token.  Similar to the `cp' request, you should use it at the
     beginning of your document to control color output.

     Colors can be also turned off with the `-c' command line option.

 - Request: .defcolor ident scheme color_components
     Define color with name IDENT.  SCHEME can be one of  the following
     values: `rgb' (three components), `cmy' (three components), `cmyk'
     (four components), and `gray' or `grey' (one component).

     Color components can be given either as a hexadecimal string or as
     positive decimal integers in the range 0-65535.  A hexadecimal
     string contains all color components concatenated.  It must start
     with either `#' or `##'; the former specifies hex values in the
     range 0-255 (which are internally multiplied by 257), the latter
     in the range 0-65535.  Examples: `#FFC0CB' (pink), `##ffff0000ffff'
     (magenta).  The default color name value is device-specific
     (usually black).  It is possible that the default color for `\m'
     and `\M' is not identical.

     A new scaling indicator `f' has been introduced which multiplies
     its value by 65536; this makes it convenient to specify color
     components as fractions in the range 0 to 1 (1f equals 65536u).
     Example:


          .defcolor darkgreen rgb 0.1f 0.5f 0.2f

     Note that `f' is the default scaling indicator for the `defcolor'
     request, thus the above statement is equivalent to


          .defcolor darkgreen rgb 0.1 0.5 0.2


 - Escape: \mc
 - Escape: \m(co
 - Escape: \m[color]
 - Register: \n[.m]
     Set drawing color.  The following example shows how to turn the
     next four words red.


          \m[red]these are in red\m[] and these words are in black.

     The escape `\m[]' returns to the previous color.

     The name of the current drawing color is available in the
     read-only, string-valued number register `.m'.

     The drawing color is associated with the current environment
     (*note Environments::).

     Note that `\m' doesn't produce an input token in `gtroff'.  As a
     consequence, it can be used in requests like `mc' (which expects a
     single character as an argument) to change the color on the fly:


          .mc \m[red]x\m[]


 - Escape: \Mc
 - Escape: \M(co
 - Escape: \M[color]
 - Register: \n[.M]
     Set background color for filled objects drawn with the `\D'...''
     commands.

     A red ellipse can be created with the following code:


          \M[red]\h'0.5i'\D'E 2i 1i'\M[]

     The escape `\M[]' returns to the previous fill color.

     The name of the current background color is available in the
     read-only, string-valued number register `.M'.

     The fill color is associated with the current environment (*note
     Environments::).

     Note that `\M' doesn't produce an input token in `gtroff'.


File: groff,  Node: I/O,  Next: Postprocessor Access,  Prev: Colors,  Up: gtroff Reference

I/O
===

`gtroff' has several requests for including files:

 - Request: .so file
     Read in the specified FILE and includes it in place of the `so'
     request.  This is quite useful for large documents, e.g. keeping
     each chapter in a separate file.  *Note gsoelim::, for more
     information.

     Since `gtroff' replaces the `so' request with the contents of
     `file', it makes a difference whether the data is terminated with
     a newline or not: Assuming that file `xxx' contains the word `foo'
     without a final newline, this


          This is
          .so xxx
          bar

     yields `This is foobar'.

     The search path for FILE can be controlled with the `-I' command
     line option.

 - Request: .pso command
     Read the standard output from the specified COMMAND and includes
     it in place of the `pso' request.

     This request causes an error if used in safer mode (which is the
     default).  Use `groff''s or `troff''s `-U' option to activate
     unsafe mode.

     The comment regarding a final newline for the `so' request is valid
     for `pso' also.

 - Request: .mso file
     Identical to the `so' request except that `gtroff' searches for
     the specified FILE in the same directories as macro files for the
     the `-m' command line option.  If the file name to be included has
     the form `NAME.tmac' and it isn't found, `mso' tries to include
     `tmac.NAME' and vice versa.

 - Request: .trf file
 - Request: .cf file
     Transparently output the contents of FILE.  Each line is output as
     if it were preceded by `\!'; however, the lines are not subject to
     copy mode interpretation.  If the file does not end with a newline,
     then a newline is added (`trf' only).  For example, to define a
     macro `x' containing the contents of file `f', use


          .di x
          .trf f
          .di

     Both `trf' and `cf', when used in a diversion, embeds an object in
     the diversion which, when reread, causes the contents of FILE to
     be transparently copied through to the output.  In UNIX `troff',
     the contents of FILE is immediately copied through to the output
     regardless of whether there is a current diversion; this behaviour
     is so anomalous that it must be considered a bug.

     While `cf' copies the contents of FILE completely unprocessed,
     `trf' disallows characters such as NUL that are not valid `gtroff'
     input characters (*note Identifiers::).

     Both requests cause a line break.

 - Request: .nx [file]
     Force `gtroff' to continue processing of the file specified as an
     argument.  If no argument is given, immediately jump to the end of
     file.

 - Request: .rd [prompt [arg1 arg2 ...]]
     Read from standard input, and include what is read as though it
     were part of the input file.  Text is read until a blank line is
     encountered.

     If standard input is a TTY input device (keyboard), write PROMPT
     to standard error, followed by a colon (or send BEL for a beep if
     no argument is given).

     Arguments after PROMPT are available for the input.  For example,
     the line


          .rd data foo bar

     with the input `This is \$2.' prints


          This is bar.


   Using the `nx' and `rd' requests, it is easy to set up form letters.
The form letter template is constructed like this, putting the
following lines into a file called `repeat.let':


     .ce
     \*(td
     .sp 2
     .nf
     .rd
     .sp
     .rd
     .fi
     Body of letter.
     .bp
     .nx repeat.let

When this is run, a file containing the following lines should be
redirected in.  Note that requests included in this file are executed
as though they were part of the form letter.  The last block of input
is the `ex' request which tells `groff' to stop processing.  If this
was not there, `groff' would not know when to stop.


     Trent A. Fisher
     708 NW 19th Av., #202
     Portland, OR  97209
     
     Dear Trent,
     
     Len Adollar
     4315 Sierra Vista
     San Diego, CA  92103
     
     Dear Mr. Adollar,
     
     .ex

 - Request: .pi pipe
     Pipe the output of `gtroff' to the shell command(s) specified by
     PIPE.  This request must occur before `gtroff' has a chance to
     print anything.

     `pi' causes an error if used in safer mode (which is the default).
     Use `groff''s or `troff''s `-U' option to activate unsafe mode.

     Multiple calls to `pi' are allowed, acting as a chain.  For
     example,


          .pi foo
          .pi bar
          ...

     is the same as `.pi foo | bar'.

     Note that the intermediate output format of `gtroff' is piped to
     the specified commands.  Consequently, calling `groff' without the
     `-Z' option normally causes a fatal error.

 - Request: .sy cmds
 - Register: \n[systat]
     Execute the shell command(s) specified by CMDS.  The output is not
     saved anyplace, so it is up to the user to do so.

     This request causes an error if used in safer mode (which is the
     default).  Use `groff''s or `troff''s `-U' option to activate
     unsafe mode.

     For example, the following code fragment introduces the current
     time into a document:


          .sy perl -e 'printf ".nr H %d\\n.nr M %d\\n.nr S %d\\n",\
                       (localtime(time))[2,1,0]' > /tmp/x\n[$$]
          .so /tmp/x\n[$$]
          .sy rm /tmp/x\n[$$]
          \nH:\nM:\nS

     Note that this works by having the `perl' script (run by `sy')
     print out the `nr' requests which set the number registers `H',
     `M', and `S', and then reads those commands in with the `so'
     request.

     For most practical purposes, the number registers `seconds',
     `minutes', and `hours' which are initialized at start-up of
     `gtroff' should be sufficient.  Use the `af' request to get a
     formatted output:


          .af hours 00
          .af minutes 00
          .af seconds 00
          \n[hours]:\n[minutes]:\n[seconds]

     The `systat' read-write number register contains the return value
     of the `system()' function executed by the last `sy' request.

 - Request: .open stream file
 - Request: .opena stream file
     Open the specified FILE for writing and associates the specified
     STREAM with it.

     The `opena' request is like `open', but if the file exists, append
     to it instead of truncating it.

     Both `open' and `opena' cause an error if used in safer mode
     (which is the default).  Use `groff''s or `troff''s `-U' option to
     activate unsafe mode.

 - Request: .write stream data
 - Request: .writec stream data
     Write to the file associated with the specified STREAM.  The
     stream must previously have been the subject of an open request.
     The remainder of the line is interpreted as the `ds' request reads
     its second argument: A leading `"' is stripped, and it is read in
     copy-in mode.

     The `writec' request is like `write', but only `write' appends a
     newline to the data.

 - Request: .writem stream xx
     Write the contents of the macro or string XX to the file
     associated with the specified STREAM.

     XX is read in copy mode, i.e., already formatted elements are
     ignored.  Consequently, diversions must be unformatted with the
     `asciify' request before calling `writem'.  Usually, this means a
     loss of information.

 - Request: .close stream
     Close the specified STREAM; the stream is no longer an acceptable
     argument to the `write' request.

     Here a simple macro to write an index entry.


          .open idx test.idx
          .
          .de IX
          .  write idx \\n[%] \\$*
          ..
          .
          .IX test entry
          .
          .close idx


 - Escape: \Ve
 - Escape: \V(ev
 - Escape: \V[env]
     Interpolate the contents of the specified environment variable ENV
     (one-character name E, two-character name EV) as returned by the
     function `getenv'.  `\V' is interpreted in copy-in mode.


File: groff,  Node: Postprocessor Access,  Next: Miscellaneous,  Prev: I/O,  Up: gtroff Reference

Postprocessor Access
====================

There are two escapes which give information directly to the
postprocessor.  This is particularly useful for embedding POSTSCRIPT
into the final document.

 - Escape: \X'xxx'
     Embeds its argument into the `gtroff' output preceded with `x X'.

     The escapes `\&', `\)', `\%', and `\:' are ignored within `\X',
     `\ ' and `\~' are converted to single space characters.  All other
     escapes (except `\\' which produces a backslash) cause an error.

     If the `use_charnames_in_special' keyword is set in the `DESC'
     file, special characters no longer cause an error; the name XX is
     represented as `\(XX)' in the `x X' output command.  Additionally,
     the backslash is represented as `\\'.

     `use_charnames_in_special' is currently used by `grohtml' only.

 - Escape: \Yn
 - Escape: \Y(nm
 - Escape: \Y[name]
     This is approximately equivalent to `\X'\*[NAME]'' (one-character
     name N, two-character name NM).  However, the contents of the
     string or macro NAME are not interpreted; also it is permitted for
     NAME to have been defined as a macro and thus contain newlines (it
     is not permitted for the argument to `\X' to contain newlines).
     The inclusion of newlines requires an extension to the UNIX `troff'
     output format, and confuses drivers that do not know about this
     extension (*note Device Control Commands::).

   *Note Output Devices::.


File: groff,  Node: Miscellaneous,  Next: Gtroff Internals,  Prev: Postprocessor Access,  Up: gtroff Reference

Miscellaneous
=============

This section documents parts of `gtroff' which cannot (yet) be
categorized elsewhere in this manual.

 - Request: .nm [start [inc [space [indent]]]]
     Print line numbers.  START is the line number of the _next_ output
     line.  INC indicates which line numbers are printed.  For example,
     the value 5 means to emit only line numbers which are multiples
     of 5; this defaults to 1.  SPACE is the space to be left between
     the number and the text; this defaults to one digit space.  The
     fourth argument is the indentation of the line numbers, defaulting
     to zero.  Both SPACE and INDENT are given as multiples of digit
     spaces; they can be negative also.  Without any arguments, line
     numbers are turned off.

     `gtroff' reserves three digit spaces for the line number (which is
     printed right-justified) plus the amount given by INDENT; the
     output lines are concatenated to the line numbers, separated by
     SPACE, and _without_ reducing the line length.  Depending on the
     value of the horizontal page offset (as set with the `po'
     request), line numbers which are longer than the reserved space
     stick out to the left, or the whole line is moved to the right.

     Parameters corresponding to missing arguments are not changed; any
     non-digit argument (to be more precise, any argument starting with
     a character valid as a delimiter for identifiers) is also treated
     as missing.

     If line numbering has been disabled with a call to `nm' without an
     argument, it can be reactivated with `.nm +0', using the
     previously active line numbering parameters.

     The parameters of `nm' are associated with the current environment
     (*note Environments::).  The current output line number is
     available in the number register `ln'.


          .po 1m
          .ll 2i
          This test shows how line numbering works with groff.
          .nm 999
          This test shows how line numbering works with groff.
          .br
          .nm xxx 3 2
          .ll -\w'0'u
          This test shows how line numbering works with groff.
          .nn 2
          This test shows how line numbering works with groff.

     And here the result:


           This  test shows how
           line numbering works
           999 with   groff.   This
          1000 test shows how  line
          1001 numbering works with
          1002 groff.
                This test shows how
                line      numbering
           works  with  groff.
           This test shows how
          1005  line      numbering
                works with groff.


 - Request: .nn [skip]
     Temporarily turn off line numbering.  The argument is the number
     of lines not to be numbered; this defaults to 1.

 - Request: .mc glyph [dist]
     Print a "margin character" to the right of the text.(1) (*note
     Miscellaneous-Footnote-1::)  The first argument is the glyph to be
     printed.  The second argument is the distance away from the right
     margin.  If missing, the previously set value is used; default is
     10pt).  For text lines that are too long (that is, longer than the
     text length plus DIST), the margin character is directly appended
     to the lines.

     With no arguments the margin character is turned off.  If this
     occurs before a break, no margin character is printed.

     For compatibility with AT&T `troff', a call to `mc' to set the
     margin character can't be undone immediately; at least one line
     gets a margin character.  Thus


          .ll 1i
          .mc \[br]
          .mc
          xxx
          .br
          xxx

     produces


          xxx        |
          xxx

     For empty lines and lines produced by the `tl' request no margin
     character is emitted.

     The margin character is associated with the current environment
     (*note Environments::).

     This is quite useful for indicating text that has changed, and, in
     fact, there are programs available for doing this (they are called
     `nrchbar' and `changebar' and can be found in any
     `comp.sources.unix' archive).


          .ll 3i
          .mc |
          This paragraph is highlighted with a margin
          character.
          .sp
          Note that vertical space isn't marked.
          .br
          \&
          .br
          But we can fake it with `\&'.

     Result:


          This  paragraph is highlighted |
          with a margin character.       |
          
          Note that vertical space isn't |
          marked.                        |
                                         |
          But we can fake it with `\&'.  |


 - Request: .psbb filename
 - Register: \n[llx]
 - Register: \n[lly]
 - Register: \n[urx]
 - Register: \n[ury]
     Retrieve the bounding box of the PostScript image found in
     FILENAME.  The file must conform to Adobe's "Document Structuring
     Conventions" (DSC); the command searches for a `%%BoundingBox'
     comment and extracts the bounding box values into the number
     registers `llx', `lly', `urx', and `ury'.  If an error occurs (for
     example, `psbb' cannot find the `%%BoundingBox' comment), it sets
     the four number registers to zero.

     The search path for FILENAME can be controlled with the `-I'
     command line option.


File: groff,  Node: Miscellaneous-Footnotes,  Up: Miscellaneous

   (1) "Margin character" is a misnomer since it is an output glyph.


File: groff,  Node: Gtroff Internals,  Next: Debugging,  Prev: Miscellaneous,  Up: gtroff Reference

`gtroff' Internals
==================

`gtroff' processes input in three steps.  One or more input characters
are converted to an "input token".(1) (*note Gtroff
Internals-Footnote-1::)  Then, one or more input tokens are converted
to an "output node".  Finally, output nodes are converted to the
intermediate output language understood by all output devices.

   Actually, before step one happens, `gtroff' converts certain escape
sequences into reserved input characters (not accessible by the user);
such reserved characters are used for other internal processing also -
this is the very reason why not all characters are valid input.  *Note
Identifiers::, for more on this topic.

   For example, the input string `fi\[:u]' is converted into a
character token `f', a character token `i', and a special token `:u'
(representing u umlaut).  Later on, the character tokens `f' and `i'
are merged to a single output node representing the ligature glyph `fi'
(provided the current font has a glyph for this ligature); the same
happens with `:u'.  All output glyph nodes are `processed' which means
that they are invariably associated with a given font, font size,
advance width, etc.  During the formatting process, `gtroff' itself
adds various nodes to control the data flow.

   Macros, diversions, and strings collect elements in two chained
lists: a list of input tokens which have been passed unprocessed, and a
list of output nodes.  Consider the following the diversion.


     .di xxx
     a
     \!b
     c
     .br
     .di

It contains these elements.

node list            token list   element number
line start node      --           1
glyph node `a'       --           2
word space node      --           3
--                   `b'          4
--                   `\n'         5
glyph node `c'       --           6
vertical size node   --           7
vertical size node   --           8
--                   `\n'         9

Elements 1, 7, and 8 are inserted by `gtroff'; the latter two (which
are always present) specify the vertical extent of the last line,
possibly modified by `\x'.  The `br' request finishes the current
partial line, inserting a newline input token which is subsequently
converted to a space when the diversion is reread.  Note that the word
space node has a fixed width which isn't stretchable anymore.  To
convert horizontal space nodes back to input tokens, use the `unformat'
request.

   Macros only contain elements in the token list (and the node list is
empty); diversions and strings can contain elements in both lists.

   Note that the `chop' request simply reduces the number of elements
in a macro, string, or diversion by one.  Exceptions are "compatibility
save" and "compatibility ignore" input tokens which are ignored.  The
`substring' request also ignores those input tokens.

   Some requests like `tr' or `cflags' work on glyph identifiers only;
this means that the associated glyph can be changed without destroying
this association.  This can be very helpful for substituting glyphs.
In the following example, we assume that glyph `foo' isn't available by
default, so we provide a substitution using the `fchar' request and map
it to input character `x'.


     .fchar \[foo] foo
     .tr x \[foo]

Now let us assume that we install an additional special font `bar'
which has glyph `foo'.


     .special bar
     .rchar \[foo]

Since glyphs defined with `fchar' are searched before glyphs in special
fonts, we must call `rchar' to remove the definition of the fallback
glyph.  Anyway, the translation is still active; `x' now maps to the
real glyph `foo'.


File: groff,  Node: Gtroff Internals-Footnotes,  Up: Gtroff Internals

   (1) Except the escapes `\f', `\F', `\H', `\m', `\M', `\R', `\s', and
`\S' which are processed immediately if not in copy-in mode.


File: groff,  Node: Debugging,  Next: Implementation Differences,  Prev: Gtroff Internals,  Up: gtroff Reference

Debugging
=========

`gtroff' is not easy to debug, but there are some useful features and
strategies for debugging.

 - Request: .lf line [filename]
     Change the line number and optionally the file name `gtroff' shall
     use for error and warning messages.  LINE is the input line number
     of the _next_ line.

     Without argument, the request is ignored.

     This is a debugging aid for documents which are split into many
     files, then put together with `soelim' and other preprocessors.
     Usually, it isn't invoked manually.

     Note that other `troff' implementations (including the original
     AT&T version) handle `lf' differently.  For them, LINE changes the
     line number of the _current_ line.

 - Request: .tm string
 - Request: .tm1 string
 - Request: .tmc string
     Send STRING to the standard error output; this is very useful for
     printing debugging messages among other things.

     STRING is read in copy mode.

     The `tm' request ignores leading spaces of STRING; `tm1' handles
     its argument similar to the `ds' request: a leading double quote
     in STRING is stripped to allow initial blanks.

     The `tmc' request is similar to `tm1' but does not append a
     newline (as is done in `tm' and `tm1').

 - Request: .ab [string]
     Similar to the `tm' request, except that it causes `gtroff' to
     stop processing.  With no argument it prints `User Abort.' to
     standard error.

 - Request: .ex
     The `ex' request also causes `gtroff' to stop processing; see also
     *Note I/O::.

   When doing something involved it is useful to leave the debugging
statements in the code and have them turned on by a command line flag.


     .if \n(DB .tm debugging output

To activate these statements say


     groff -rDB=1 file

   If it is known in advance that there will be many errors and no
useful output, `gtroff' can be forced to suppress formatted output with
the `-z' flag.

 - Request: .pm
     Print the entire symbol table on `stderr'.  Names of all defined
     macros, strings, and diversions are print together with their size
     in bytes.  Since `gtroff' sometimes adds nodes by itself, the
     returned size can be larger than expected.

     This request differs from UNIX `troff': `gtroff' reports the sizes
     of diversions, ignores an additional argument to print only the
     total of the sizes, and the size isn't returned in blocks of 128
     characters.

 - Request: .pnr
     Print the names and contents of all currently defined number
     registers on `stderr'.

 - Request: .ptr
     Print the names and positions of all traps (not including input
     line traps and diversion traps) on `stderr'.  Empty slots in the
     page trap list are printed as well, because they can affect the
     priority of subsequently planted traps.

 - Request: .fl
     Instruct `gtroff' to flush its output immediately.  The intent is
     for interactive use, but this behaviour is currently not
     implemented in `gtroff'.  Contrary to UNIX `troff', TTY output is
     sent to a device driver also (`grotty'), making it non-trivial to
     communicate interactively.

     This request causes a line break.

 - Request: .backtrace
     Print a backtrace of the input stack to the standard error stream.

     Consider the following in file `test':


          .de xxx
          .  backtrace
          ..
          .de yyy
          .  xxx
          ..
          .
          .yyy

     On execution, `gtroff' prints the following:


          test:2: backtrace: macro `xxx'
          test:5: backtrace: macro `yyy'
          test:8: backtrace: file `test'

     The option `-b' of `gtroff' internally calls a variant of this
     request on each error and warning.

 - Register: \n[slimit]
     Use the `slimit' number register to set the maximum number of
     objects on the input stack.  If `slimit' is less than or equal
     to 0, there is no limit set.  With no limit, a buggy recursive
     macro can exhaust virtual memory.

     The default value is 1000; this is a compile-time constant.

 - Request: .warnscale si
     Set the scaling indicator used in warnings to SI.  Valid values for
     SI are `u', `i', `c', `p', and `P'.  At startup, it is set to `i'.

 - Request: .spreadwarn [limit]
     Make `gtroff' emit a warning if the additional space inserted for
     each space between words in an output line is larger or equal to
     LIMIT.  A negative value is changed to zero; no argument toggles
     the warning on and off without changing LIMIT.  The default scaling
     indicator is `m'.  At startup, `spreadwarn' is deactivated, and
     LIMIT is set to 3m.

     For example,


          .spreadwarn 0.2m

     will cause a warning if `gtroff' must add 0.2m or more for each
     interword space in a line.

     This request is active only if text is justified to both margins
     (using `.ad b').

   `gtroff' has command line options for printing out more warnings
(`-w') and for printing backtraces (`-b') when a warning or an error
occurs.  The most verbose level of warnings is `-ww'.

 - Request: .warn [flags]
 - Register: \n[.warn]
     Control the level of warnings checked for.  The FLAGS are the sum
     of the numbers associated with each warning that is to be enabled;
     all other warnings are disabled.  The number associated with each
     warning is listed below.  For example, `.warn 0' disables all
     warnings, and `.warn 1' disables all warnings except that about
     missing glyphs.  If no argument is given, all warnings are enabled.

     The read-only number register `.warn' contains the current warning
     level.

* Menu:

* Warnings::


File: groff,  Node: Warnings,  Prev: Debugging,  Up: Debugging

Warnings
--------

The warnings that can be given to `gtroff' are divided into the
following categories.  The name associated with each warning is used by
the `-w' and `-W' options; the number is used by the `warn' request and
by the `.warn' register.

`char'
`1'
     Non-existent glyphs.(1) (*note Warnings-Footnote-1::)  This is
     enabled by default.

`number'
`2'
     Invalid numeric expressions.  This is enabled by default.  *Note
     Expressions::.

`break'
`4'
     In fill mode, lines which could not be broken so that their length
     was less than the line length.  This is enabled by default.

`delim'
`8'
     Missing or mismatched closing delimiters.

`el'
`16'
     Use of the `el' request with no matching `ie' request.  *Note
     if-else::.

`scale'
`32'
     Meaningless scaling indicators.

`range'
`64'
     Out of range arguments.

`syntax'
`128'
     Dubious syntax in numeric expressions.

`di'
`256'
     Use of `di' or `da' without an argument when there is no current
     diversion.

`mac'
`512'
     Use of undefined strings, macros and diversions.  When an undefined
     string, macro, or diversion is used, that string is automatically
     defined as empty.  So, in most cases, at most one warning is given
     for each name.

`reg'
`1024'
     Use of undefined number registers.  When an undefined number
     register is used, that register is automatically defined to have a
     value of 0.  So, in most cases, at most one warning is given for
     use of a particular name.

`tab'
`2048'
     Use of a tab character where a number was expected.

`right-brace'
`4096'
     Use of `\}' where a number was expected.

`missing'
`8192'
     Requests that are missing non-optional arguments.

`input'
`16384'
     Invalid input characters.

`escape'
`32768'
     Unrecognized escape sequences.  When an unrecognized escape
     sequence `\X' is encountered, the escape character is ignored, and
     X is printed.

`space'
`65536'
     Missing space between a request or macro and its argument.  This
     warning is given when an undefined name longer than two characters
     is encountered, and the first two characters of the name make a
     defined name.  The request or macro is not invoked.  When this
     warning is given, no macro is automatically defined.  This is
     enabled by default.  This warning never occurs in compatibility
     mode.

`font'
`131072'
     Non-existent fonts.  This is enabled by default.

`ig'
`262144'
     Invalid escapes in text ignored with the `ig' request.  These are
     conditions that are errors when they do not occur in ignored text.

`color'
`524288'
     Color related warnings.

`all'
     All warnings except `di', `mac' and `reg'.  It is intended that
     this covers all warnings that are useful with traditional macro
     packages.

`w'
     All warnings.


File: groff,  Node: Warnings-Footnotes,  Up: Warnings

   (1) `char' is a misnomer since it reports missing glyphs - there
aren't missing input characters, only invalid ones.


File: groff,  Node: Implementation Differences,  Prev: Debugging,  Up: gtroff Reference

Implementation Differences
==========================

GNU `troff' has a number of features which cause incompatibilities with
documents written with old versions of `troff'.

   Long names cause some incompatibilities.  UNIX `troff' interprets


     .dsabcd

as defining a string `ab' with contents `cd'.  Normally, GNU `troff'
interprets this as a call of a macro named `dsabcd'.  Also UNIX `troff'
interprets `\*[' or `\n[' as references to a string or number register
called `['.  In GNU `troff', however, this is normally interpreted as
the start of a long name.  In compatibility mode GNU `troff' interprets
long names in the traditional way (which means that they are not
recognized as names).

 - Request: .cp [n]
 - Request: .do cmd
 - Register: \n[.C]
     If N is missing or non-zero, turn on compatibility mode;
     otherwise, turn it off.

     The read-only number register `.C' is 1 if compatibility mode is
     on, 0 otherwise.

     Compatibility mode can be also turned on with the `-C' command line
     option.

     The `do' request turns off compatibility mode while executing its
     arguments as a `gtroff' command.


          .do fam T

     executes the `fam' request when compatibility mode is enabled.

     `gtroff' restores the previous compatibility setting before
     interpreting any files sourced by the CMD.

   Two other features are controlled by `-C'.  If not in compatibility
mode, GNU `troff' preserves the input level in delimited arguments:


     .ds xx '
     \w'abc\*(xxdef'

In compatibility mode, the string `72def'' is returned; without `-C'
the resulting string is `168' (assuming a TTY output device).

   Finally, the escapes `\f', `\H', `\m', `\M', `\R', `\s', and `\S'
are transparent for recognizing the beginning of a line only in
compatibility mode (this is a rather obscure feature).  For example,
the code


     .de xx
     Hallo!
     ..
     \fB.xx\fP

prints `Hallo!' in bold face if in compatibility mode, and `.xx' in
bold face otherwise.

   GNU `troff' does not allow the use of the escape sequences `\|',
`\^', `\&', `\{', `\}', `\<SP>', `\'', `\`', `\-', `\_', `\!', `\%',
and `\c' in names of strings, macros, diversions, number registers,
fonts or environments; UNIX `troff' does.  The `\A' escape sequence
(*note Identifiers::) may be helpful in avoiding use of these escape
sequences in names.

   Fractional point sizes cause one noteworthy incompatibility.  In
UNIX `troff' the `ps' request ignores scale indicators and thus


     .ps 10u

sets the point size to 10 points, whereas in GNU `troff' it sets the
point size to 10 scaled points.  *Note Fractional Type Sizes::, for
more information.

   In GNU `troff' there is a fundamental difference between
(unformatted) input characters and (formatted) output glyphs.
Everything that affects how a glyph is output is stored with the glyph
node; once a glyph node has been constructed it is unaffected by any
subsequent requests that are executed, including `bd', `cs', `tkf',
`tr', or `fp' requests.  Normally glyphs are constructed from input
characters at the moment immediately before the glyph is added to the
current output line.  Macros, diversions and strings are all, in fact,
the same type of object; they contain lists of input characters and
glyph nodes in any combination.  A glyph node does not behave like an
input character for the purposes of macro processing; it does not
inherit any of the special properties that the input character from
which it was constructed might have had.  For example,


     .di x
     \\\\
     .br
     .di
     .x

prints `\\' in GNU `troff'; each pair of input backslashes is turned
into one output backslash and the resulting output backslashes are not
interpreted as escape characters when they are reread.  UNIX `troff'
would interpret them as escape characters when they were reread and
would end up printing one `\'.  The correct way to obtain a printable
backslash is to use the `\e' escape sequence: This always prints a
single instance of the current escape character, regardless of whether
or not it is used in a diversion; it also works in both GNU `troff' and
UNIX `troff'.(1) (*note Implementation Differences-Footnote-1::)  To
store, for some reason, an escape sequence in a diversion that will be
interpreted when the diversion is reread, either use the traditional
`\!' transparent output facility, or, if this is unsuitable, the new
`\?' escape sequence.

   *Note Diversions::, and *Note Gtroff Internals::, for more
information.


File: groff,  Node: Implementation Differences-Footnotes,  Up: Implementation Differences

   (1) To be completely independent of the current escape character,
use `\(rs' which represents a reverse solidus (backslash) glyph.


File: groff,  Node: Preprocessors,  Next: Output Devices,  Prev: gtroff Reference,  Up: Top

Preprocessors
*************

This chapter describes all preprocessors that come with `groff' or
which are freely available.

* Menu:

* geqn::
* gtbl::
* gpic::
* ggrn::
* grap::
* grefer::
* gsoelim::


File: groff,  Node: geqn,  Next: gtbl,  Prev: Preprocessors,  Up: Preprocessors

`geqn'
======

* Menu:

* Invoking geqn::


File: groff,  Node: Invoking geqn,  Prev: geqn,  Up: geqn

Invoking `geqn'
---------------


File: groff,  Node: gtbl,  Next: gpic,  Prev: geqn,  Up: Preprocessors

`gtbl'
======

* Menu:

* Invoking gtbl::


File: groff,  Node: Invoking gtbl,  Prev: gtbl,  Up: gtbl

Invoking `gtbl'
---------------


File: groff,  Node: gpic,  Next: ggrn,  Prev: gtbl,  Up: Preprocessors

`gpic'
======

* Menu:

* Invoking gpic::


File: groff,  Node: Invoking gpic,  Prev: gpic,  Up: gpic

Invoking `gpic'
---------------


File: groff,  Node: ggrn,  Next: grap,  Prev: gpic,  Up: Preprocessors

`ggrn'
======

* Menu:

* Invoking ggrn::


File: groff,  Node: Invoking ggrn,  Prev: ggrn,  Up: ggrn

Invoking `ggrn'
---------------


File: groff,  Node: grap,  Next: grefer,  Prev: ggrn,  Up: Preprocessors

`grap'
======

A free implementation of `grap', written by Ted Faber, is available as
an extra package from the following address:

     `http://www.lunabase.org/~faber/Vault/software/grap/'


File: groff,  Node: grefer,  Next: gsoelim,  Prev: grap,  Up: Preprocessors

`grefer'
========

* Menu:

* Invoking grefer::


File: groff,  Node: Invoking grefer,  Prev: grefer,  Up: grefer

Invoking `grefer'
-----------------


File: groff,  Node: gsoelim,  Prev: grefer,  Up: Preprocessors

`gsoelim'
=========

* Menu:

* Invoking gsoelim::


File: groff,  Node: Invoking gsoelim,  Prev: gsoelim,  Up: gsoelim

Invoking `gsoelim'
------------------


File: groff,  Node: Output Devices,  Next: File formats,  Prev: Preprocessors,  Up: Top

Output Devices
**************

* Menu:

* Special Characters::
* grotty::
* grops::
* grodvi::
* grolj4::
* grolbp::
* grohtml::
* gxditview::


File: groff,  Node: Special Characters,  Next: grotty,  Prev: Output Devices,  Up: Output Devices

Special Characters
==================

*Note Font Files::.


File: groff,  Node: grotty,  Next: grops,  Prev: Special Characters,  Up: Output Devices

`grotty'
========

* Menu:

* Invoking grotty::


File: groff,  Node: Invoking grotty,  Prev: grotty,  Up: grotty

Invoking `grotty'
-----------------


File: groff,  Node: grops,  Next: grodvi,  Prev: grotty,  Up: Output Devices

`grops'
=======

* Menu:

* Invoking grops::
* Embedding PostScript::


File: groff,  Node: Invoking grops,  Next: Embedding PostScript,  Prev: grops,  Up: grops

Invoking `grops'
----------------


File: groff,  Node: Embedding PostScript,  Prev: Invoking grops,  Up: grops

Embedding POSTSCRIPT
--------------------


File: groff,  Node: grodvi,  Next: grolj4,  Prev: grops,  Up: Output Devices

`grodvi'
========

* Menu:

* Invoking grodvi::


File: groff,  Node: Invoking grodvi,  Prev: grodvi,  Up: grodvi

Invoking `grodvi'
-----------------


File: groff,  Node: grolj4,  Next: grolbp,  Prev: grodvi,  Up: Output Devices

`grolj4'
========

* Menu:

* Invoking grolj4::


File: groff,  Node: Invoking grolj4,  Prev: grolj4,  Up: grolj4

Invoking `grolj4'
-----------------


File: groff,  Node: grolbp,  Next: grohtml,  Prev: grolj4,  Up: Output Devices

`grolbp'
========

* Menu:

* Invoking grolbp::


File: groff,  Node: Invoking grolbp,  Prev: grolbp,  Up: grolbp

Invoking `grolbp'
-----------------


File: groff,  Node: grohtml,  Next: gxditview,  Prev: grolbp,  Up: Output Devices

`grohtml'
=========

* Menu:

* Invoking grohtml::
* grohtml specific registers and strings::


File: groff,  Node: Invoking grohtml,  Next: grohtml specific registers and strings,  Prev: grohtml,  Up: grohtml

Invoking `grohtml'
------------------


File: groff,  Node: grohtml specific registers and strings,  Prev: Invoking grohtml,  Up: grohtml

`grohtml' specific registers and strings
----------------------------------------

 - Register: \n[ps4html]
 - String: \*[www-image-template]
     The registers `ps4html' and `www-image-template' are defined by
     the `pre-grohtml' preprocessor.  `pre-grohtml' reads in the
     `troff' input, marks up the inline equations and passes the result
     firstly to


          troff -Tps -rps4html=1 -dwww-image-template=TEMPLATE

     and secondly to


          troff -Thtml

     The PostScript device is used to create all the image files, and
     the register `ps4html' enables the macro sets to ignore floating
     keeps, footers, and headings.

     The register `www-image-template' is set to the user specified
     template name or the default name.


File: groff,  Node: gxditview,  Prev: grohtml,  Up: Output Devices

`gxditview'
===========

* Menu:

* Invoking gxditview::


File: groff,  Node: Invoking gxditview,  Prev: gxditview,  Up: gxditview

Invoking `gxditview'
--------------------


File: groff,  Node: File formats,  Next: Installation,  Prev: Output Devices,  Up: Top

File formats
************

All files read and written by `gtroff' are text files.  The following
two sections describe their format.

* Menu:

* gtroff Output::
* Font Files::


File: groff,  Node: gtroff Output,  Next: Font Files,  Prev: File formats,  Up: File formats

`gtroff' Output
===============

This section describes the intermediate output format of GNU `troff'.
This output is produced by a run of `gtroff' before it is fed into a
device postprocessor program.

   As `groff' is a wrapper program around `gtroff' that automatically
calls a postprocessor, this output does not show up normally.  This is
why it is called "intermediate".  `groff' provides the option `-Z' to
inhibit postprocessing, such that the produced intermediate output is
sent to standard output just like calling `gtroff' manually.

   Here, the term "troff output" describes what is output by `gtroff',
while "intermediate output" refers to the language that is accepted by
the parser that prepares this output for the postprocessors.  This
parser is smarter on whitespace and implements obsolete elements for
compatibility, otherwise both formats are the same.(1) (*note gtroff
Output-Footnote-1::)

   The main purpose of the intermediate output concept is to facilitate
the development of postprocessors by providing a common programming
interface for all devices.  It has a language of its own that is
completely different from the `gtroff' language.  While the `gtroff'
language is a high-level programming language for text processing, the
intermediate output language is a kind of low-level assembler language
by specifying all positions on the page for writing and drawing.

   The intermediate output produced by `gtroff' is fairly readable,
while output from AT&T `troff' is rather hard to understand because of
strange habits that are still supported, but not used any longer by
`gtroff'.

* Menu:

* Language Concepts::
* Command Reference::
* Intermediate Output Examples::
* Output Language Compatibility::


File: groff,  Node: gtroff Output-Footnotes,  Up: gtroff Output

   (1) The parser and postprocessor for intermediate output can be
found in the file
`GROFF-SOURCE-DIR/src/libs/libdriver/input.cpp'.


File: groff,  Node: Language Concepts,  Next: Command Reference,  Prev: gtroff Output,  Up: gtroff Output

Language Concepts
-----------------

During the run of `gtroff', the input data is cracked down to the
information on what has to be printed at what position on the intended
device.  So the language of the intermediate output format can be quite
small.  Its only elements are commands with and without arguments.  In
this section, the term "command" always refers to the intermediate
output language, and never to the `gtroff' language used for document
formatting.  There are commands for positioning and text writing, for
drawing, and for device controlling.

* Menu:

* Separation::
* Argument Units::
* Document Parts::


File: groff,  Node: Separation,  Next: Argument Units,  Prev: Language Concepts,  Up: Language Concepts

Separation
..........

AT&T `troff' output has strange requirements on whitespace.  The
`gtroff' output parser, however, is smart about whitespace by making it
maximally optional.  The whitespace characters, i.e., the tab, space,
and newline characters, always have a syntactical meaning.  They are
never printable because spacing within the output is always done by
positioning commands.

   Any sequence of space or tab characters is treated as a single
"syntactical space".  It separates commands and arguments, but is only
required when there would occur a clashing between the command code and
the arguments without the space.  Most often, this happens when
variable-length command names, arguments, argument lists, or command
clusters meet.  Commands and arguments with a known, fixed length need
not be separated by syntactical space.

   A line break is a syntactical element, too.  Every command argument
can be followed by whitespace, a comment, or a newline character.  Thus
a "syntactical line break" is defined to consist of optional
syntactical space that is optionally followed by a comment, and a
newline character.

   The normal commands, those for positioning and text, consist of a
single letter taking a fixed number of arguments.  For historical
reasons, the parser allows to stack such commands on the same line, but
fortunately, in `gtroff''s intermediate output, every command with at
least one argument is followed by a line break, thus providing
excellent readability.

   The other commands - those for drawing and device controlling - have
a more complicated structure; some recognize long command names, and
some take a variable number of arguments.  So all `D' and `x' commands
were designed to request a syntactical line break after their last
argument.  Only one command, `x X', has an argument that can stretch
over several lines; all other commands must have all of their arguments
on the same line as the command, i.e., the arguments may not be
splitted by a line break.

   Empty lines (these are lines containing only space and/or a
comment), can occur everywhere.  They are just ignored.


File: groff,  Node: Argument Units,  Next: Document Parts,  Prev: Separation,  Up: Language Concepts

Argument Units
..............

Some commands take integer arguments that are assumed to represent
values in a measurement unit, but the letter for the corresponding
scale indicator is not written with the output command arguments.  Most
commands assume the scale indicator `u', the basic unit of the device,
some use `z', the scaled point unit of the device, while others, such
as the color commands, expect plain integers.

   Note that single characters can have the eighth bit set, as can the
names of fonts and special characters.  The names of characters and
fonts can be of arbitrary length.  A character that is to be printed
will always be in the current font.

   A string argument is always terminated by the next whitespace
character (space, tab, or newline); an embedded `#' character is
regarded as part of the argument, not as the beginning of a comment
command.  An integer argument is already terminated by the next
non-digit character, which then is regarded as the first character of
the next argument or command.


File: groff,  Node: Document Parts,  Prev: Argument Units,  Up: Language Concepts

Document Parts
..............

A correct intermediate output document consists of two parts, the
"prologue" and the "body".

   The task of the prologue is to set the general device parameters
using three exactly specified commands.  `gtroff''s prologue is
guaranteed to consist of the following three lines (in that order):


     x T DEVICE
     x res N H V
     x init

with the arguments set as outlined in *Note Device Control Commands::.
Note that the parser for the intermediate output format is able to
swallow additional whitespace and comments as well even in the prologue.

   The body is the main section for processing the document data.
Syntactically, it is a sequence of any commands different from the ones
used in the prologue.  Processing is terminated as soon as the first
`x stop' command is encountered; the last line of any `gtroff'
intermediate output always contains such a command.

   Semantically, the body is page oriented.  A new page is started by a
`p' command.  Positioning, writing, and drawing commands are always
done within the current page, so they cannot occur before the first `p'
command.  Absolute positioning (by the `H' and `V' commands) is done
relative to the current page; all other positioning is done relative to
the current location within this page.


File: groff,  Node: Command Reference,  Next: Intermediate Output Examples,  Prev: Language Concepts,  Up: gtroff Output

Command Reference
-----------------

This section describes all intermediate output commands, both from AT&T
`troff' as well as the `gtroff' extensions.

* Menu:

* Comment Command::
* Simple Commands::
* Graphics Commands::
* Device Control Commands::
* Obsolete Command::


File: groff,  Node: Comment Command,  Next: Simple Commands,  Prev: Command Reference,  Up: Command Reference

Comment Command
...............

`#ANYTHING<end of line>'
     A comment.  Ignore any characters from the `#' character up to the
     next newline character.

     This command is the only possibility for commenting in the
     intermediate output.  Each comment can be preceded by arbitrary
     syntactical space; every command can be terminated by a comment.


File: groff,  Node: Simple Commands,  Next: Graphics Commands,  Prev: Comment Command,  Up: Command Reference

Simple Commands
...............

The commands in this subsection have a command code consisting of a
single character, taking a fixed number of arguments.  Most of them are
commands for positioning and text writing.  These commands are smart
about whitespace.  Optionally, syntactical space can be inserted
before, after, and between the command letter and its arguments.  All
of these commands are stackable, i.e., they can be preceded by other
simple commands or followed by arbitrary other commands on the same
line.  A separating syntactical space is only necessary when two
integer arguments would clash or if the preceding argument ends with a
string argument.

`C XXX<whitespace>'
     Print a special character named XXX.  The trailing syntactical
     space or line break is necessary to allow glyph names of arbitrary
     length.  The glyph is printed at the current print position; the
     glyph's size is read from the font file.  The print position is
     not changed.

`c G'
     Print glyph G at the current print position;(1) (*note Simple
     Commands-Footnote-1::) the glyph's size is read from the font
     file.  The print position is not changed.

`f N'
     Set font to font number N (a non-negative integer).

`H N'
     Move right to the absolute vertical position N (a non-negative
     integer in basic units `u' relative to left edge of current page.

`h N'
     Move N (a non-negative integer) basic units `u' horizontally to
     the right.  The original UNIX troff manual allows negative values
     for N also, but `gtroff' doesn't use this.

`m COLOR-SCHEME [COMPONENT ...]'
     Set the color for text (glyphs), line drawing, and the outline of
     graphic objects using different color schemes; the analoguous
     command for the filling color of graphic objects is `DF'.  The
     color components are specified as integer arguments between 0 and
     65536.  The number of color components and their meaning vary for
     the different color schemes.  These commands are generated by
     `gtroff''s escape sequence `\m'.  No position changing.  These
     commands are a `gtroff' extension.

    `mc CYAN MAGENTA YELLOW'
          Set color using the CMY color scheme, having the 3 color
          components CYAN, MAGENTA, and YELLOW.

    `md'
          Set color to the default color value (black in most cases).
          No component arguments.

    `mg GRAY'
          Set color to the shade of gray given by the argument, an
          integer between 0 (black) and 65536 (white).

    `mk CYAN MAGENTA YELLOW BLACK'
          Set color using the CMYK color scheme, having the 4 color
          components CYAN, MAGENTA, YELLOW, and BLACK.

    `mr RED GREEN BLUE'
          Set color using the RGB color scheme, having the 3 color
          components RED, GREEN, and BLUE.

`N N'
     Print glyph with index N (a non-negative integer) of the current
     font.  This command is a `gtroff' extension.

`n B A'
     Inform the device about a line break, but no positioning is done by
     this command.  In AT&T `troff', the integer arguments B and A
     informed about the space before and after the current line to make
     the intermediate output more human readable without performing any
     action.  In `groff', they are just ignored, but they must be
     provided for compatibility reasons.

`p N'
     Begin a new page in the outprint.  The page number is set to N.
     This page is completely independent of pages formerly processed
     even if those have the same page number.  The vertical position on
     the outprint is automatically set to 0.  All positioning, writing,
     and drawing is always done relative to a page, so a `p' command
     must be issued before any of these commands.

`s N'
     Set point size to N scaled points (this is unit `z').  AT&T
     `troff' used the unit points (`p') instead.  *Note Output Language
     Compatibility::.

`t XXX<whitespace>'
`t XXX DUMMY-ARG<whitespace>'
     Print a word, i.e., a sequence of characters XXX representing
     output glyphs which names are single characters, terminated by a
     space character or a line break; an optional second integer
     argument is ignored (this allows the formatter to generate an even
     number of arguments).  The first glyph should be printed at the
     current position, the current horizontal position should then be
     increased by the width of the first glyph, and so on for each
     glyph.  The widths of the glyphs are read from the font file,
     scaled for the current point size, and rounded to a multiple of
     the horizontal resolution.  Special characters cannot be printed
     using this command (use the `C' command for special characters).
     This command is a `gtroff' extension; it is only used for devices
     whose `DESC' file contains the `tcommand' keyword (*note DESC File
     Format::).

`u N XXX<whitespace>'
     Print word with track kerning.  This is the same as the `t'
     command except that after printing each glyph, the current
     horizontal position is increased by the sum of the width of that
     glyph and N (an integer in basic units `u').  This command is a
     `gtroff' extension; it is only used for devices whose `DESC' file
     contains the `tcommand' keyword (*note DESC File Format::).

`V N'
     Move down to the absolute vertical position N (a non-negative
     integer in basic units `u') relative to upper edge of current page.

`v N'
     Move N basic units `u' down (N is a non-negative integer).  The
     original UNIX troff manual allows negative values for N also, but
     `gtroff' doesn't use this.

`w'
     Informs about a paddable white space to increase readability.  The
     spacing itself must be performed explicitly by a move command.


File: groff,  Node: Simple Commands-Footnotes,  Up: Simple Commands

   (1) `c' is actually a misnomer since it outputs a glyph.


File: groff,  Node: Graphics Commands,  Next: Device Control Commands,  Prev: Simple Commands,  Up: Command Reference

Graphics Commands
.................

Each graphics or drawing command in the intermediate output starts with
the letter `D', followed by one or two characters that specify a
subcommand; this is followed by a fixed or variable number of integer
arguments that are separated by a single space character.  A `D'
command may not be followed by another command on the same line (apart
from a comment), so each `D' command is terminated by a syntactical
line break.

   `gtroff' output follows the classical spacing rules (no space
between command and subcommand, all arguments are preceded by a single
space character), but the parser allows optional space between the
command letters and makes the space before the first argument optional.
As usual, each space can be any sequence of tab and space characters.

   Some graphics commands can take a variable number of arguments.  In
this case, they are integers representing a size measured in basic
units `u'.  The arguments called H1, H2, ..., HN stand for horizontal
distances where positive means right, negative left.  The arguments
called V1, V2, ..., VN stand for vertical distances where positive
means down, negative up.  All these distances are offsets relative to
the current location.

   Each graphics command directly corresponds to a similar `gtroff'
`\D' escape sequence.  *Note Drawing Requests::.

   Unknown `D' commands are assumed to be device-specific.  Its
arguments are parsed as strings; the whole information is then sent to
the postprocessor.

   In the following command reference, the syntax element <line break>
means a syntactical line break as defined above.

`D~ H1 V1 H2 V2 ... HN VN<line break>'
     Draw B-spline from current position to offset (H1,V1), then to
     offset (H2,V2), if given, etc. up to (HN,VN).  This command takes
     a variable number of argument pairs; the current position is moved
     to the terminal point of the drawn curve.

`Da H1 V1 H2 V2<line break>'
     Draw arc from current position to (H1,V1)+(H2,V2) with center at
     (H1,V1); then move the current position to the final point of the
     arc.

`DC D<line break>'
`DC D DUMMY-ARG<line break>'
     Draw a solid circle using the current fill color with diameter D
     (integer in basic units `u') with leftmost point at the current
     position; then move the current position to the rightmost point of
     the circle.  An optional second integer argument is ignored (this
     allows the formatter to generate an even number of arguments).
     This command is a `gtroff' extension.

`Dc D<line break>'
     Draw circle line with diameter D (integer in basic units `u') with
     leftmost point at the current position; then move the current
     position to the rightmost point of the circle.

`DE H V<line break>'
     Draw a solid ellipse in the current fill color with a horizontal
     diameter of H and a vertical diameter of V (both integers in basic
     units `u') with the leftmost point at the current position; then
     move to the rightmost point of the ellipse.  This command is a
     `gtroff' extension.

`De H V<line break>'
     Draw an outlined ellipse with a horizontal diameter of H and a
     vertical diameter of V (both integers in basic units `u') with the
     leftmost point at current position; then move to the rightmost
     point of the ellipse.

`DF COLOR-SCHEME [COMPONENT ...]<line break>'
     Set fill color for solid drawing objects using different color
     schemes; the analoguous command for setting the color of text, line
     graphics, and the outline of graphic objects is `m'.  The color
     components are specified as integer arguments between 0 and 65536.
     The number of color components and their meaning vary for the
     different color schemes.  These commands are generated by
     `gtroff''s escape sequences `\D'F ...'' and `\M' (with no other
     corresponding graphics commands).  No position changing.  This
     command is a `gtroff' extension.

    `DFc CYAN MAGENTA YELLOW<line break>'
          Set fill color for solid drawing objects using the CMY color
          scheme, having the 3 color components CYAN, MAGENTA, and
          YELLOW.

    `DFd<line break>'
          Set fill color for solid drawing objects to the default fill
          color value (black in most cases).  No component arguments.

    `DFg GRAY<line break>'
          Set fill color for solid drawing objects to the shade of gray
          given by the argument, an integer between 0 (black) and 65536
          (white).

    `DFk CYAN MAGENTA YELLOW BLACK<line break>'
          Set fill color for solid drawing objects using the CMYK color
          scheme, having the 4 color components CYAN, MAGENTA, YELLOW,
          and BLACK.

    `DFr RED GREEN BLUE<line break>'
          Set fill color for solid drawing objects using the RGB color
          scheme, having the 3 color components RED, GREEN, and BLUE.

`Df N<line break>'
     The argument N must be an integer in the range -32767 to 32767.

    0 <= N <= 1000
          Set the color for filling solid drawing objects to a shade of
          gray, where 0 corresponds to solid white, 1000 (the default)
          to solid black, and values in between to intermediate shades
          of gray; this is obsoleted by command `DFg'.

    N < 0 or N > 1000
          Set the filling color to the color that is currently being
          used for the text and the outline, see command `m'.  For
          example, the command sequence


               mg 0 0 65536
               Df -1

          sets all colors to blue.

     No position changing.  This command is a `gtroff' extension.

`Dl H V<line break>'
     Draw line from current position to offset (H,V) (integers in basic
     units `u'); then set current position to the end of the drawn line.

`Dp H1 V1 H2 V2 ... HN VN<line break>'
     Draw a polygon line from current position to offset (H1,V1), from
     there to offset (H2,V2), etc. up to offset (HN,VN), and from there
     back to the starting position.  For historical reasons, the
     position is changed by adding the sum of all arguments with odd
     index to the actual horizontal position and the even ones to the
     vertical position.  Although this doesn't make sense it is kept
     for compatibility.  This command is a `gtroff' extension.

`Dp H1 V1 H2 V2 ... HN VN<line break>'
     Draw a solid polygon in the current fill color rather than an
     outlined polygon, using the same arguments and positioning as the
     corresponding `Dp' command.  This command is a `gtroff' extension.

`Dt N<line break>'
     Set the current line thickness to N (an integer in basic units
     `u') if N>0; if N=0 select the smallest available line thickness;
     if N<0 set the line thickness proportional to the point size (this
     is the default before the first `Dt' command was specified).  For
     historical reasons, the horizontal position is changed by adding
     the argument to the actual horizontal position, while the vertical
     position is not changed.  Although this doesn't make sense it is
     kept for compatibility.  This command is a `gtroff' extension.


File: groff,  Node: Device Control Commands,  Next: Obsolete Command,  Prev: Graphics Commands,  Up: Command Reference

Device Control Commands
.......................

Each device control command starts with the letter `x', followed by a
space character (optional or arbitrary space or tab in `gtroff') and a
subcommand letter or word; each argument (if any) must be preceded by a
syntactical space.  All `x' commands are terminated by a syntactical
line break; no device control command can be followed by another
command on the same line (except a comment).

   The subcommand is basically a single letter, but to increase
readability, it can be written as a word, i.e., an arbitrary sequence
of characters terminated by the next tab, space, or newline character.
All characters of the subcommand word but the first are simply ignored.
For example, `gtroff' outputs the initialization command `x i' as
`x init' and the resolution command `x r' as `x res'.

   In the following, the syntax element <line break> means a
syntactical line break (*note Separation::).

`xF NAME<line break>'
     The `F' stands for FILENAME.

     Use NAME as the intended name for the current file in error
     reports.  This is useful for remembering the original file name
     when `gtroff' uses an internal piping mechanism.  The input file is
     not changed by this command.  This command is a `gtroff' extension.

`xf N S<line break>'
     The `f' stands for FONT.

     Mount font position N (a non-negative integer) with font named S
     (a text word).  *Note Font Positions::.

`xH N<line break>'
     The `H' stands for HEIGHT.

     Set glyph height to N (a positive integer in scaled points `z').
     AT&T `troff' uses the unit points (`p') instead.  *Note Output
     Language Compatibility::.

`xi<line break>'
     The `i' stands for INIT.

     Initialize device.  This is the third command of the prologue.

`xp<line break>'
     The `p' stands for PAUSE.

     Parsed but ignored.  The original UNIX troff manual writes

          pause device, can be restarted

`xr N H V<line break>'
     The `r' stands for RESOLUTION.

     Resolution is N, while H is the minimal horizontal motion, and V
     the minimal vertical motion possible with this device; all
     arguments are positive integers in basic units `u' per inch.  This
     is the second command of the prologue.

`xS N<line break>'
     The `S' stands for SLANT.

     Set slant to N (an integer in basic units `u').

`xs<line break>'
     The `s' stands for STOP.

     Terminates the processing of the current file; issued as the last
     command of any intermediate troff output.

`xt<line break>'
     The `t' stands for TRAILER.

     Generate trailer information, if any.  In GTROFF, this is actually
     just ignored.

`xT XXX<line break>'
     The `T' stands for TYPESETTER.

     Set name of device to word XXX, a sequence of characters ended by
     the next white space character.  The possible device names coincide
     with those from the `groff' `-T' option.  This is the first
     command of the prologue.

`xu N<line break>'
     The `u' stands for UNDERLINE.

     Configure underlining of spaces.  If N is 1, start underlining of
     spaces; if N is 0, stop underlining of spaces.  This is needed for
     the `cu' request in nroff mode and is ignored otherwise.  This
     command is a `gtroff' extension.

`xX ANYTHING<line break>'
     The `x' stands for X-ESCAPE.

     Send string ANYTHING uninterpreted to the device.  If the line
     following this command starts with a `+' character this line is
     interpreted as a continuation line in the following sense.  The
     `+' is ignored, but a newline character is sent instead to the
     device, the rest of the line is sent uninterpreted.  The same
     applies to all following lines until the first character of a line
     is not a `+' character.  This command is generated by the `gtroff'
     escape sequence `\X'.  The line-continuing feature is a `gtroff'
     extension.


File: groff,  Node: Obsolete Command,  Prev: Device Control Commands,  Up: Command Reference

Obsolete Command
................

In AT&T `troff' output, the writing of a single glyph is mostly done by
a very strange command that combines a horizontal move and a single
character giving the glyph name.  It doesn't have a command code, but
is represented by a 3-character argument consisting of exactly 2 digits
and a character.

DDG
     Move right DD (exactly two decimal digits) basic units `u', then
     print glyph G (represented as a single character).

     In `gtroff', arbitrary syntactical space around and within this
     command is allowed to be added.  Only when a preceding command on
     the same line ends with an argument of variable length a
     separating space is obligatory.  In AT&T `troff', large clusters
     of these and other commands are used, mostly without spaces; this
     made such output almost unreadable.

   For modern high-resolution devices, this command does not make sense
because the width of the glyphs can become much larger than two decimal
digits.  In `gtroff', this is only used for the devices `X75',
`X75-12', `X100', and `X100-12'.  For other devices, the commands `t'
and `u' provide a better functionality.


File: groff,  Node: Intermediate Output Examples,  Next: Output Language Compatibility,  Prev: Command Reference,  Up: gtroff Output

Intermediate Output Examples
----------------------------

This section presents the intermediate output generated from the same
input for three different devices.  The input is the sentence `hell
world' fed into `gtroff' on the command line.

High-resolution device `ps'
     This is the standard output of `gtroff' if no `-T' option is given.

          shell> echo "hell world" | groff -Z -T ps
          
          x T ps
          x res 72000 1 1
          x init
          p1
          x font 5 TR
          f5
          s10000
          V12000
          H72000
          thell
          wh2500
          tw
          H96620
          torld
          n12000 0
          x trailer
          V792000
          x stop

     This output can be fed into `grops' to get its representation as a
     PostScript file.

Low-resolution device `latin1'
     This is similar to the high-resolution device except that the
     positioning is done at a minor scale.  Some comments (lines
     starting with `#') were added for clarification; they were not
     generated by the formatter.

          shell> echo "hell world" | groff -Z -T latin1
          
          # prologue
          x T latin1
          x res 240 24 40
          x init
          # begin a new page
          p1
          # font setup
          x font 1 R
          f1
          s10
          # initial positioning on the page
          V40
          H0
          # write text `hell'
          thell
          # inform about space, and issue a horizontal jump
          wh24
          # write text `world'
          tworld
          # announce line break, but do nothing because ...
          n40 0
          # ... the end of the document has been reached
          x trailer
          V2640
          x stop

     This output can be fed into `grotty' to get a formatted text
     document.

AT&T `troff' output
     Since a computer monitor has a very low resolution compared to
     modern printers the intermediate output for the X Window devices
     can use the jump-and-write command with its 2-digit displacements.

          shell> echo "hell world" | groff -Z -T X100
          
          x T X100
          x res 100 1 1
          x init
          p1
          x font 5 TR
          f5
          s10
          V16
          H100
          # write text with jump-and-write commands
          ch07e07l03lw06w11o07r05l03dh7
          n16 0
          x trailer
          V1100
          x stop

     This output can be fed into `xditview' or `gxditview' for
     displaying in X.

     Due to the obsolete jump-and-write command, the text clusters in
     the AT&T `troff' output are almost unreadable.


File: groff,  Node: Output Language Compatibility,  Prev: Intermediate Output Examples,  Up: gtroff Output

Output Language Compatibility
-----------------------------

The intermediate output language of AT&T `troff' was first documented
in the UNIX troff manual, with later additions documented in `A
Typesetter-indenpendent TROFF', written by Brian Kernighan.

   The `gtroff' intermediate output format is compatible with this
specification except for the following features.

   * The classical quasi device independence is not yet implemented.

   * The old hardware was very different from what we use today.  So the
     `groff' devices are also fundamentally different from the ones in
     AT&T `troff'.  For example, the AT&T PostScript device is called
     `post' and has a resolution of only 720 units per inch, suitable
     for printers 20 years ago, while `groff''s `ps' device has a
     resolution of 72000 units per inch.  Maybe, by implementing some
     rescaling mechanism similar to the classical quasi device
     independence, `groff' could emulate AT&T's `post' device.

   * The B-spline command `D~' is correctly handled by the intermediate
     output parser, but the drawing routines aren't implemented in some
     of the postprocessor programs.

   * The argument of the commands `s' and `x H' has the implicit unit
     scaled point `z' in `gtroff', while AT&T `troff' has point (`p').
     This isn't an incompatibility but a compatible extension, for both
     units coincide for all devices without a `sizescale' parameter in
     the `DESC' file, including all postprocessors from AT&T and
     `groff''s text devices.  The few `groff' devices with a
     `sizescale' parameter either do not exist for AT&T `troff', have a
     different name, or seem to have a different resolution.  So
     conflicts are very unlikely.

   * The position changing after the commands `Dp', `DP', and `Dt' is
     illogical, but as old versions of `gtroff' used this feature it is
     kept for compatibility reasons.



File: groff,  Node: Font Files,  Prev: gtroff Output,  Up: File formats

Font Files
==========

The `gtroff' font format is roughly a superset of the `ditroff' font
format (as used in later versions of AT&T `troff' and its descendants).
Unlike the `ditroff' font format, there is no associated binary
format; all files are text files.(1) (*note Font Files-Footnote-1::)
The font files for device NAME are stored in a directory `devNAME'.
There are two types of file: a device description file called `DESC'
and for each font F a font file called `F'.

* Menu:

* DESC File Format::
* Font File Format::


File: groff,  Node: Font Files-Footnotes,  Up: Font Files

   (1) Plan 9 `troff' has also abandoned the binary format.


File: groff,  Node: DESC File Format,  Next: Font File Format,  Prev: Font Files,  Up: Font Files

`DESC' File Format
------------------

The `DESC' file can contain the following types of line.  Except for
the `charset' keyword which must comes last (if at all), the order of
the lines is not important.

`res N'
     There are N machine units per inch.

`hor N'
     The horizontal resolution is N machine units.  All horizontal
     quantities are rounded to be multiples of this value.

`vert N'
     The vertical resolution is N machine units.  All vertical
     quantities are rounded to be multiples of this value.

`sizescale N'
     The scale factor for point sizes.  By default this has a value
     of 1.  One scaled point is equal to one point/N.  The arguments to
     the `unitwidth' and `sizes' commands are given in scaled points.
     *Note Fractional Type Sizes::, for more information.

`unitwidth N'
     Quantities in the font files are given in machine units for fonts
     whose point size is N scaled points.

`prepro PROGRAM'
     Call PROGRAM as a preprocessor.  Currently, this keyword is used
     by `groff' with option `-Thtml' only.

`postpro PROGRAM'
     Call PROGRAM as a postprocessor.  For example, the line


          postpro grodvi

     in the file `devdvi/DESC' makes `groff' call `grodvi' if option
     `-Tdvi' is given (and `-Z' isn't used).

`tcommand'
     This means that the postprocessor can handle the `t' and `u'
     intermediate output commands.

`sizes S1 S2 ... SN 0'
     This means that the device has fonts at S1, S2, ...  SN scaled
     points.  The list of sizes must be terminated by 0 (this is digit
     zero).  Each SI can also be a range of sizes M-N.  The list can
     extend over more than one line.

`styles S1 S2 ... SM'
     The first M font positions are associated with styles S1 ... SM.

`fonts N F1 F2 F3 ... FN'
     Fonts F1 ... FN are mounted in the font positions M+1, ..., M+N
     where M is the number of styles.  This command may extend over
     more than one line.  A font name of 0 means no font is mounted on
     the corresponding font position.

`family FAM'
     The default font family is FAM.

`use_charnames_in_special'
     This command indicates that `gtroff' should encode special
     characters inside special commands.  Currently, this is only used
     by the HTML output device.  *Note Postprocessor Access::.

`papersize STRING ...'
     Select a paper size.  Valid values for STRING are the ISO paper
     types `A0'-`A7', `B0'-`B7', `C0'-`C7', `D0'-`D7', `DL', and the US
     paper types `letter', `legal', `tabloid', `ledger', `statement',
     `executive', `com10', and `monarch'.  Case is not significant for
     STRING if it holds predefined paper types.  Alternatively, STRING
     can be a file name (e.g. `/etc/papersize'); if the file can be
     opened, `groff' reads the first line and tests for the above paper
     sizes.  Finally, STRING can be a custom paper size in the format
     `LENGTH,WIDTH' (no spaces before and after the comma).  Both
     LENGTH and WIDTH must have a unit appended; valid values are `i'
     for inches, `C' for centimeters, `p' for points, and `P' for
     picas.  Example: `12c,235p'.  An argument which starts with a
     digit is always treated as a custom paper format.  `papersize'
     sets both the vertical and horizontal dimension of the output
     medium.

     More than one argument can be specified; `groff' scans from left to
     right and uses the first valid paper specification.

`pass_filenames'
     Tell `gtroff' to emit the name of the source file currently being
     processed.  This is achieved by the intermediate output command
     `F'.  Currently, this is only used by the HTML output device.

`print PROGRAM'
     Use PROGRAM as a spooler program for printing.  If omitted, the
     `-l' and `-L' options of `groff' are ignored.

`charset'
     This line and everything following in the file are ignored.  It is
     allowed for the sake of backwards compatibility.

   The `res', `unitwidth', `fonts', and `sizes' lines are mandatory.
Other commands are ignored by `gtroff' but may be used by
postprocessors to store arbitrary information about the device in the
`DESC' file.

   Here a list of obsolete keywords which are recognized by `groff' but
completely ignored: `spare1', `spare2', `biggestfont'.


File: groff,  Node: Font File Format,  Prev: DESC File Format,  Up: Font Files

Font File Format
----------------

A "font file", also (and probably better) called a "font description
file", has two sections.  The first section is a sequence of lines each
containing a sequence of blank delimited words; the first word in the
line is a key, and subsequent words give a value for that key.

`name F'
     The name of the font is F.

`spacewidth N'
     The normal width of a space is N.

`slant N'
     The glyphs of the font have a slant of N degrees.  (Positive means
     forward.)

`ligatures LIG1 LIG2 ... LIGN [0]'
     Glyphs LIG1, LIG2, ..., LIGN are ligatures; possible ligatures are
     `ff', `fi', `fl', `ffi' and `ffl'.  For backwards compatibility,
     the list of ligatures may be terminated with a 0.  The list of
     ligatures may not extend over more than one line.

`special'
     The font is "special"; this means that when a glyph is requested
     that is not present in the current font, it is searched for in any
     special fonts that are mounted.

   Other commands are ignored by `gtroff' but may be used by
postprocessors to store arbitrary information about the font in the font
file.

   The first section can contain comments which start with the `#'
character and extend to the end of a line.

   The second section contains one or two subsections.  It must contain
a `charset' subsection and it may also contain a `kernpairs'
subsection.  These subsections can appear in any order.  Each
subsection starts with a word on a line by itself.

   The word `charset' starts the character set subsection.(1) (*note
Font File Format-Footnote-1::)  The `charset' line is followed by a
sequence of lines.  Each line gives information for one glyph.  A line
comprises a number of fields separated by blanks or tabs.  The format is

     NAME METRICS TYPE CODE [ENTITY-NAME] [`--' COMMENT]

NAME identifies the glyph name(2) (*note Font File Format-Footnote-2::):
If NAME is a single character C then it corresponds to the `gtroff'
input character C; if it is of the form `\C' where C is a single
character, then it corresponds to the special character `\[C]';
otherwise it corresponds to the special character `\[NAME]'.  If it is
exactly two characters XX it can be entered as `\(XX'.  Note that
single-letter special characters can't be accessed as `\C'; the only
exception is `\-' which is identical to `\[-]'.

   `gtroff' supports 8-bit input characters; however some utilities
have difficulties with eight-bit characters.  For this reason, there is
a convention that the entity name `charN' is equivalent to the single
input character whose code is N.  For example, `char163' would be
equivalent to the character with code 163 which is the pounds sterling
sign in the ISO Latin-1 character set.  You shouldn't use `charN'
entities in font description files since they are related to input, not
output.  Otherwise, you get hard-coded connections between input and
output encoding which prevents use of different (input) character sets.

   The name `---' is special and indicates that the glyph is unnamed;
such glyphs can only be used by means of the `\N' escape sequence in
`gtroff'.

   The TYPE field gives the glyph type:

`1'
     the glyph has a descender, for example, `p';

`2'
     the glyph has an ascender, for example, `b';

`3'
     the glyph has both an ascender and a descender, for example, `('.

   The CODE field gives the code which the postprocessor uses to print
the glyph.  The glyph can also be input to `gtroff' using this code by
means of the `\N' escape sequence.  CODE can be any integer.  If it
starts with `0' it is interpreted as octal; if it starts with `0x' or
`0X' it is interpreted as hexadecimal.  Note, however, that the `\N'
escape sequence only accepts a decimal integer.

   The ENTITY-NAME field gives an ASCII string identifying the glyph
which the postprocessor uses to print the `gtroff' glyph NAME.  This
field is optional and has been introduced so that the HTML device
driver can encode its character set.  For example, the glyph `\[Po]' is
represented as `&pound;' in HTML 4.0.

   Anything on the line after the ENTITY-NAME field resp. after `--'
will be ignored.

   The METRICS field has the form:

     WIDTH[`,'HEIGHT[`,'DEPTH[`,'ITALIC-CORRECTION
       [`,'LEFT-ITALIC-CORRECTION[`,'SUBSCRIPT-CORRECTION]]]]]

There must not be any spaces between these subfields (it has been split
here into two lines for better legibility only).  Missing subfields are
assumed to be 0.  The subfields are all decimal integers.  Since there
is no associated binary format, these values are not required to fit
into a variable of type `char' as they are in `ditroff'.  The WIDTH
subfield gives the width of the glyph.  The HEIGHT subfield gives the
height of the glyph (upwards is positive); if a glyph does not extend
above the baseline, it should be given a zero height, rather than a
negative height.  The DEPTH subfield gives the depth of the glyph, that
is, the distance from the baseline to the lowest point below the
baseline to which the glyph extends (downwards is positive); if a glyph
does not extend below the baseline, it should be given a zero depth,
rather than a negative depth.  The ITALIC-CORRECTION subfield gives the
amount of space that should be added after the glyph when it is
immediately to be followed by a glyph from a roman font.  The
LEFT-ITALIC-CORRECTION subfield gives the amount of space that should
be added before the glyph when it is immediately to be preceded by a
glyph from a roman font.  The SUBSCRIPT-CORRECTION gives the amount of
space that should be added after a glyph before adding a subscript.
This should be less than the italic correction.

   A line in the `charset' section can also have the format


     NAME "

This indicates that NAME is just another name for the glyph mentioned
in the preceding line.

   The word `kernpairs' starts the kernpairs section.  This contains a
sequence of lines of the form:


     C1 C2 N

This means that when glyph C1 appears next to glyph C2 the space
between them should be increased by N.  Most entries in the kernpairs
section have a negative value for N.


File: groff,  Node: Font File Format-Footnotes,  Up: Font File Format

   (1) This keyword is misnamed since it starts a list of ordered
glyphs, not characters.

   (2) The distinction between input, characters, and output, glyphs,
is not clearly separated in the terminology of `groff'; for example,
the `char' request should be called `glyph' since it defines an output
entity.


File: groff,  Node: Installation,  Next: Copying This Manual,  Prev: File formats,  Up: Top

Installation
************


File: groff,  Node: Copying This Manual,  Next: Request Index,  Prev: Installation,  Up: Top

Copying This Manual
*******************

* Menu:

* GNU Free Documentation License::  License for copying this manual.


File: groff,  Node: GNU Free Documentation License,  Up: Copying This Manual

GNU Free Documentation License
==============================

                        Version 1.1, March 2000
     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has less than five).

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications",
          preserve the section's title, and preserve in the section all
          the substance and tone of each of the contributor
          acknowledgments and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgments", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: groff,  Node: Request Index,  Next: Escape Index,  Prev: Copying This Manual,  Up: Top

Request Index
*************

Requests appear without the leading control character (normally either
`.' or `'').

* Menu:

* ab:                                    Debugging.
* ad:                                    Manipulating Filling and Adjusting.
* af:                                    Assigning Formats.
* aln:                                   Setting Registers.
* als:                                   Strings.
* am:                                    Writing Macros.
* am1:                                   Writing Macros.
* ami:                                   Writing Macros.
* ami1:                                  Writing Macros.
* as:                                    Strings.
* as1:                                   Strings.
* asciify:                               Diversions.
* backtrace:                             Debugging.
* bd:                                    Artificial Fonts.
* blm:                                   Blank Line Traps.
* box:                                   Diversions.
* boxa:                                  Diversions.
* bp:                                    Page Control.
* br:                                    Manipulating Filling and Adjusting.
* break:                                 while.
* brp:                                   Manipulating Filling and Adjusting.
* c2:                                    Character Translations.
* cc:                                    Character Translations.
* ce:                                    Manipulating Filling and Adjusting.
* cf:                                    I/O.
* cflags:                                Using Symbols.
* ch:                                    Page Location Traps.
* char:                                  Using Symbols.
* chop:                                  Strings.
* close:                                 I/O.
* color:                                 Colors.
* composite:                             Using Symbols.
* continue:                              while.
* cp:                                    Implementation Differences.
* cs:                                    Artificial Fonts.
* cu:                                    Artificial Fonts.
* da:                                    Diversions.
* de:                                    Writing Macros.
* de1:                                   Writing Macros.
* defcolor:                              Colors.
* dei:                                   Writing Macros.
* dei1:                                  Writing Macros.
* di:                                    Diversions.
* do:                                    Implementation Differences.
* ds:                                    Strings.
* ds1:                                   Strings.
* dt:                                    Diversion Traps.
* ec:                                    Character Translations.
* ecr:                                   Character Translations.
* ecs:                                   Character Translations.
* el:                                    if-else.
* em:                                    End-of-input Traps.
* eo:                                    Character Translations.
* ev:                                    Environments.
* evc:                                   Environments.
* ex:                                    Debugging.
* fam:                                   Font Families.
* fc:                                    Fields.
* fchar:                                 Using Symbols.
* fi:                                    Manipulating Filling and Adjusting.
* fl:                                    Debugging.
* fp:                                    Font Positions.
* fschar:                                Using Symbols.
* fspecial:                              Special Fonts.
* ft <1>:                                Font Positions.
* ft:                                    Changing Fonts.
* ftr:                                   Changing Fonts.
* hc:                                    Manipulating Hyphenation.
* hcode:                                 Manipulating Hyphenation.
* hla:                                   Manipulating Hyphenation.
* hlm:                                   Manipulating Hyphenation.
* hpf:                                   Manipulating Hyphenation.
* hpfa:                                  Manipulating Hyphenation.
* hpfcode:                               Manipulating Hyphenation.
* hw:                                    Manipulating Hyphenation.
* hy:                                    Manipulating Hyphenation.
* hym:                                   Manipulating Hyphenation.
* hys:                                   Manipulating Hyphenation.
* ie:                                    if-else.
* if:                                    if-else.
* ig:                                    Comments.
* in:                                    Line Layout.
* it:                                    Input Line Traps.
* itc:                                   Input Line Traps.
* kern:                                  Ligatures and Kerning.
* lc:                                    Leaders.
* length:                                Strings.
* lf:                                    Debugging.
* lg:                                    Ligatures and Kerning.
* linetabs:                              Tabs and Fields.
* ll:                                    Line Layout.
* ls:                                    Manipulating Spacing.
* lt:                                    Page Layout.
* mc:                                    Miscellaneous.
* mk:                                    Page Motions.
* mso:                                   I/O.
* na:                                    Manipulating Filling and Adjusting.
* ne:                                    Page Control.
* nf:                                    Manipulating Filling and Adjusting.
* nh:                                    Manipulating Hyphenation.
* nm:                                    Miscellaneous.
* nn:                                    Miscellaneous.
* nop:                                   if-else.
* nr <1>:                                Auto-increment.
* nr:                                    Setting Registers.
* nroff:                                 Troff and Nroff Mode.
* ns:                                    Manipulating Spacing.
* nx:                                    I/O.
* open:                                  I/O.
* opena:                                 I/O.
* os:                                    Page Control.
* output:                                Diversions.
* pc:                                    Page Layout.
* pi:                                    I/O.
* pl:                                    Page Layout.
* pm:                                    Debugging.
* pn:                                    Page Layout.
* pnr:                                   Debugging.
* po:                                    Line Layout.
* ps:                                    Changing Type Sizes.
* psbb:                                  Miscellaneous.
* pso:                                   I/O.
* ptr:                                   Debugging.
* pvs:                                   Changing Type Sizes.
* rchar:                                 Using Symbols.
* rd:                                    I/O.
* return:                                Writing Macros.
* rfschar:                               Using Symbols.
* rj:                                    Manipulating Filling and Adjusting.
* rm:                                    Strings.
* rn:                                    Strings.
* rnn:                                   Setting Registers.
* rr:                                    Setting Registers.
* rs:                                    Manipulating Spacing.
* rt:                                    Page Motions.
* schar:                                 Using Symbols.
* shc:                                   Manipulating Hyphenation.
* shift:                                 Parameters.
* sizes:                                 Changing Type Sizes.
* so:                                    I/O.
* sp:                                    Manipulating Spacing.
* special:                               Special Fonts.
* spreadwarn:                            Debugging.
* ss:                                    Manipulating Filling and Adjusting.
* sty:                                   Font Families.
* substring:                             Strings.
* sv:                                    Page Control.
* sy:                                    I/O.
* ta:                                    Tabs and Fields.
* tc:                                    Tabs and Fields.
* ti:                                    Line Layout.
* tkf:                                   Ligatures and Kerning.
* tl:                                    Page Layout.
* tm:                                    Debugging.
* tm1:                                   Debugging.
* tmc:                                   Debugging.
* tr:                                    Character Translations.
* trf:                                   I/O.
* trin:                                  Character Translations.
* trnt:                                  Character Translations.
* troff:                                 Troff and Nroff Mode.
* uf:                                    Artificial Fonts.
* ul:                                    Artificial Fonts.
* unformat:                              Diversions.
* vpt:                                   Page Location Traps.
* vs:                                    Changing Type Sizes.
* warn:                                  Debugging.
* warnscale:                             Debugging.
* wh:                                    Page Location Traps.
* while:                                 while.
* write:                                 I/O.
* writec:                                I/O.
* writem:                                I/O.


File: groff,  Node: Escape Index,  Next: Operator Index,  Prev: Request Index,  Up: Top

Escape Index
************

Any escape sequence `\X' with X not in the list below emits a warning,
printing glyph X.

* Menu:

* \:                                     Using Symbols.
* \!:                                    Diversions.
* \":                                    Comments.
* \#:                                    Comments.
* \$:                                    Parameters.
* \$*:                                   Parameters.
* \$0:                                   Parameters.
* \$@:                                   Parameters.
* \%:                                    Manipulating Hyphenation.
* \&:                                    Ligatures and Kerning.
* \':                                    Using Symbols.
* \):                                    Ligatures and Kerning.
* \*:                                    Strings.
* \,:                                    Ligatures and Kerning.
* \-:                                    Using Symbols.
* \.:                                    Character Translations.
* \/:                                    Ligatures and Kerning.
* \0:                                    Page Motions.
* \<colon>:                              Manipulating Hyphenation.
* \<RET>:                                Line Control.
* \<SP>:                                 Page Motions.
* \?:                                    Diversions.
* \\:                                    Character Translations.
* \^:                                    Page Motions.
* \`:                                    Using Symbols.
* \a:                                    Leaders.
* \A:                                    Identifiers.
* \b:                                    Drawing Requests.
* \B:                                    Expressions.
* \C:                                    Using Symbols.
* \c:                                    Line Control.
* \D:                                    Drawing Requests.
* \d:                                    Page Motions.
* \E:                                    Character Translations.
* \e:                                    Character Translations.
* \f:                                    Font Positions.
* \F:                                    Font Families.
* \f:                                    Changing Fonts.
* \g:                                    Assigning Formats.
* \h:                                    Page Motions.
* \H:                                    Artificial Fonts.
* \k:                                    Page Motions.
* \L:                                    Drawing Requests.
* \l:                                    Drawing Requests.
* \M:                                    Colors.
* \m:                                    Colors.
* \N:                                    Using Symbols.
* \n <1>:                                Auto-increment.
* \n:                                    Interpolating Registers.
* \O:                                    Suppressing output.
* \o:                                    Page Motions.
* \p:                                    Manipulating Filling and Adjusting.
* \r:                                    Page Motions.
* \R:                                    Setting Registers.
* \s:                                    Changing Type Sizes.
* \S:                                    Artificial Fonts.
* \t:                                    Tabs and Fields.
* \u:                                    Page Motions.
* \V:                                    I/O.
* \v:                                    Page Motions.
* \w:                                    Page Motions.
* \X:                                    Postprocessor Access.
* \x:                                    Manipulating Spacing.
* \Y:                                    Postprocessor Access.
* \Z:                                    Page Motions.
* \z:                                    Page Motions.
* \{:                                    if-else.
* \|:                                    Page Motions.
* \}:                                    if-else.
* \~:                                    Page Motions.


File: groff,  Node: Operator Index,  Next: Register Index,  Prev: Escape Index,  Up: Top

Operator Index
**************

* Menu:

* !:                                     Expressions.
* %:                                     Expressions.
* &:                                     Expressions.
* (:                                     Expressions.
* ):                                     Expressions.
* *:                                     Expressions.
* +:                                     Expressions.
* -:                                     Expressions.
* /:                                     Expressions.
* <:                                     Expressions.
* <=:                                    Expressions.
* <?:                                    Expressions.
* <colon>:                               Expressions.
* =:                                     Expressions.
* ==:                                    Expressions.
* >:                                     Expressions.
* >=:                                    Expressions.
* >?:                                    Expressions.


File: groff,  Node: Register Index,  Next: Macro Index,  Prev: Operator Index,  Up: Top

Register Index
**************

The macro package or program a specific register belongs to is appended
in brackets.

   A register name `x' consisting of exactly one character can be
accessed as `\nx'.  A register name `xx' consisting of exactly two
characters can be accessed as `\n(xx'.  Register names `xxx' of any
length can be accessed as `\n[xxx]'.

* Menu:

* $$:                                    Built-in Registers.
* % <1>:                                 Page Control.
* %:                                     Page Layout.
* .$:                                    Parameters.
* .a:                                    Manipulating Spacing.
* .A:                                    Built-in Registers.
* .b:                                    Artificial Fonts.
* .C:                                    Implementation Differences.
* .c:                                    Built-in Registers.
* .cdp:                                  Environments.
* .ce:                                   Manipulating Filling and Adjusting.
* .cht:                                  Environments.
* .color:                                Colors.
* .csk:                                  Environments.
* .d:                                    Diversions.
* .ev:                                   Environments.
* .f:                                    Font Positions.
* .fam:                                  Font Families.
* .fn:                                   Font Families.
* .fp:                                   Font Positions.
* .g:                                    Built-in Registers.
* .h:                                    Diversions.
* .H:                                    Built-in Registers.
* .height:                               Artificial Fonts.
* .hla:                                  Manipulating Hyphenation.
* .hlc:                                  Manipulating Hyphenation.
* .hlm:                                  Manipulating Hyphenation.
* .hy:                                   Manipulating Hyphenation.
* .hym:                                  Manipulating Hyphenation.
* .hys:                                  Manipulating Hyphenation.
* .i:                                    Line Layout.
* .in:                                   Line Layout.
* .int:                                  Line Control.
* .j:                                    Manipulating Filling and Adjusting.
* .k:                                    Page Motions.
* .kern:                                 Ligatures and Kerning.
* .l:                                    Line Layout.
* .L:                                    Manipulating Spacing.
* .lg:                                   Ligatures and Kerning.
* .linetabs:                             Tabs and Fields.
* .ll:                                   Line Layout.
* .lt:                                   Page Layout.
* .M:                                    Colors.
* .m:                                    Colors.
* .n:                                    Environments.
* .ne:                                   Page Location Traps.
* .ns:                                   Manipulating Spacing.
* .o:                                    Line Layout.
* .p:                                    Page Layout.
* .P:                                    Built-in Registers.
* .pe:                                   Page Location Traps.
* .pn:                                   Page Layout.
* .ps:                                   Fractional Type Sizes.
* .psr:                                  Fractional Type Sizes.
* .pvs:                                  Changing Type Sizes.
* .rj:                                   Manipulating Filling and Adjusting.
* .s:                                    Changing Type Sizes.
* .slant:                                Artificial Fonts.
* .sr:                                   Fractional Type Sizes.
* .ss:                                   Manipulating Filling and Adjusting.
* .sss:                                  Manipulating Filling and Adjusting.
* .t:                                    Page Location Traps.
* .T:                                    Built-in Registers.
* .tabs:                                 Tabs and Fields.
* .trunc:                                Page Location Traps.
* .u:                                    Manipulating Filling and Adjusting.
* .v:                                    Changing Type Sizes.
* .V:                                    Built-in Registers.
* .vpt:                                  Page Location Traps.
* .w:                                    Environments.
* .warn:                                 Debugging.
* .x:                                    Built-in Registers.
* .Y:                                    Built-in Registers.
* .y:                                    Built-in Registers.
* .z:                                    Diversions.
* \n[.F]:                                Built-in Registers.
* \n[yr]:                                Built-in Registers.
* c.:                                    Built-in Registers.
* ct:                                    Page Motions.
* dl:                                    Diversions.
* dn:                                    Diversions.
* dw:                                    Built-in Registers.
* dy:                                    Built-in Registers.
* FF [ms]:                               ms Document Control Registers.
* FI [ms]:                               ms Document Control Registers.
* FL [ms]:                               ms Document Control Registers.
* FM [ms]:                               ms Document Control Registers.
* FPD [ms]:                              ms Document Control Registers.
* FPS [ms]:                              ms Document Control Registers.
* FVS [ms]:                              ms Document Control Registers.
* HM [ms]:                               ms Document Control Registers.
* hours:                                 Built-in Registers.
* hp:                                    Page Motions.
* LL [ms]:                               ms Document Control Registers.
* llx:                                   Miscellaneous.
* lly:                                   Miscellaneous.
* ln:                                    Built-in Registers.
* LT [ms]:                               ms Document Control Registers.
* MINGW [ms] <1>:                        Additional ms Macros.
* MINGW [ms]:                            ms Document Control Registers.
* minutes:                               Built-in Registers.
* mo:                                    Built-in Registers.
* nl:                                    Page Control.
* opmaxx:                                Suppressing output.
* opmaxy:                                Suppressing output.
* opminx:                                Suppressing output.
* opminy:                                Suppressing output.
* PD [ms]:                               ms Document Control Registers.
* PI [ms]:                               ms Document Control Registers.
* PO [ms]:                               ms Document Control Registers.
* PS [ms]:                               ms Document Control Registers.
* ps4html [grohtml]:                     grohtml specific registers and strings.
* QI [ms]:                               ms Document Control Registers.
* rsb:                                   Page Motions.
* rst:                                   Page Motions.
* sb:                                    Page Motions.
* seconds:                               Built-in Registers.
* skw:                                   Page Motions.
* slimit:                                Debugging.
* ssc:                                   Page Motions.
* st:                                    Page Motions.
* systat:                                I/O.
* urx:                                   Miscellaneous.
* ury:                                   Miscellaneous.
* VS [ms]:                               ms Document Control Registers.
* year:                                  Built-in Registers.


File: groff,  Node: Macro Index,  Next: String Index,  Prev: Register Index,  Up: Top

Macro Index
***********

The macro package a specific macro belongs to is appended in brackets.
They appear without the leading control character (normally `.').

* Menu:

* 1C [ms]:                               ms Multiple Columns.
* 2C [ms]:                               ms Multiple Columns.
* [ [ms]:                                ms Insertions.
* ] [ms]:                                ms Insertions.
* AB [ms]:                               ms Cover Page Macros.
* AE [ms]:                               ms Cover Page Macros.
* AI [ms]:                               ms Cover Page Macros.
* AM [ms] <1>:                           Additional ms Macros.
* AM [ms]:                               ms Strings and Special Characters.
* AT [man]:                              Miscellaneous man macros.
* AU [ms]:                               ms Cover Page Macros.
* B [man]:                               Man font macros.
* B [ms]:                                Highlighting in ms.
* B1 [ms]:                               ms Displays and Keeps.
* B2 [ms]:                               ms Displays and Keeps.
* BD [ms]:                               ms Displays and Keeps.
* BI [man]:                              Man font macros.
* BI [ms]:                               Highlighting in ms.
* BR [man]:                              Man font macros.
* BT [man]:                              Optional man extensions.
* BX [ms]:                               Highlighting in ms.
* CD [ms]:                               ms Displays and Keeps.
* CT [man]:                              Optional man extensions.
* CW [man]:                              Optional man extensions.
* CW [ms] <1>:                           Additional ms Macros.
* CW [ms]:                               Highlighting in ms.
* DA [ms]:                               ms Cover Page Macros.
* De [man]:                              Optional man extensions.
* De [ms]:                               ms Displays and Keeps.
* DE [ms]:                               ms Displays and Keeps.
* Ds [man]:                              Optional man extensions.
* DS [ms]:                               Additional ms Macros.
* Ds [ms]:                               ms Displays and Keeps.
* DS [ms]:                               ms Displays and Keeps.
* DT [man]:                              Miscellaneous man macros.
* EE [man]:                              Optional man extensions.
* EF [ms]:                               ms Headers and Footers.
* EH [ms]:                               ms Headers and Footers.
* EN [ms]:                               ms Insertions.
* EQ [ms]:                               ms Insertions.
* EX [man]:                              Optional man extensions.
* FE [ms]:                               ms Footnotes.
* FS [ms]:                               ms Footnotes.
* G [man]:                               Optional man extensions.
* GL [man]:                              Optional man extensions.
* HB [man]:                              Optional man extensions.
* HP [man]:                              Man usage.
* I [man]:                               Man font macros.
* I [ms]:                                Highlighting in ms.
* IB [man]:                              Man font macros.
* ID [ms]:                               ms Displays and Keeps.
* IP [man]:                              Man usage.
* IP [ms]:                               Lists in ms.
* IR [man]:                              Man font macros.
* IX [ms]:                               Additional ms Macros.
* KE [ms]:                               ms Displays and Keeps.
* KF [ms]:                               ms Displays and Keeps.
* KS [ms]:                               ms Displays and Keeps.
* LD [ms]:                               ms Displays and Keeps.
* LG [ms]:                               Highlighting in ms.
* LP [man]:                              Man usage.
* LP [ms]:                               Paragraphs in ms.
* MC [ms]:                               ms Multiple Columns.
* MS [man]:                              Optional man extensions.
* ND [ms]:                               ms Cover Page Macros.
* NE [man]:                              Optional man extensions.
* NH [ms]:                               Headings in ms.
* NL [ms]:                               Highlighting in ms.
* NT [man]:                              Optional man extensions.
* OF [ms]:                               ms Headers and Footers.
* OH [ms]:                               ms Headers and Footers.
* P [man]:                               Man usage.
* PD [man]:                              Miscellaneous man macros.
* PE [ms]:                               ms Insertions.
* Pn [man]:                              Optional man extensions.
* PN [man]:                              Optional man extensions.
* PP [man]:                              Man usage.
* PP [ms]:                               Paragraphs in ms.
* PS [ms]:                               ms Insertions.
* PT [man]:                              Optional man extensions.
* PX [ms]:                               ms TOC.
* QP [ms]:                               Paragraphs in ms.
* R [man]:                               Optional man extensions.
* R [ms]:                                Highlighting in ms.
* RB [man]:                              Man font macros.
* RD [ms]:                               ms Displays and Keeps.
* RE [man]:                              Man usage.
* RE [ms]:                               Indents in ms.
* RI [man]:                              Man font macros.
* RN [man]:                              Optional man extensions.
* RP [ms]:                               ms Cover Page Macros.
* RS [man]:                              Man usage.
* RS [ms]:                               Indents in ms.
* SB [man]:                              Man font macros.
* SH [man]:                              Man usage.
* SH [ms]:                               Headings in ms.
* SM [man]:                              Man font macros.
* SM [ms]:                               Highlighting in ms.
* SS [man]:                              Man usage.
* TA [ms]:                               Tabstops in ms.
* TB [man]:                              Optional man extensions.
* TC [ms]:                               ms TOC.
* TE [ms]:                               ms Insertions.
* TH [man]:                              Man usage.
* TL [ms]:                               ms Cover Page Macros.
* TP [man]:                              Man usage.
* TS [ms]:                               ms Insertions.
* UC [man]:                              Miscellaneous man macros.
* UL [ms]:                               Highlighting in ms.
* VE [man]:                              Optional man extensions.
* VS [man]:                              Optional man extensions.
* XA [ms]:                               ms TOC.
* XE [ms]:                               ms TOC.
* XP [ms]:                               Paragraphs in ms.
* XS [ms]:                               ms TOC.


File: groff,  Node: String Index,  Next: Glyph Name Index,  Prev: Macro Index,  Up: Top

String Index
************

The macro package or program a specific string belongs to is appended in
brackets.

   A string name `x' consisting of exactly one character can be
accessed as `\*x'.  A string name `xx' consisting of exactly two
characters can be accessed as `\*(xx'.  String names `xxx' of any
length can be accessed as `\*[xxx]'.

* Menu:

* ! [ms]:                                ms Strings and Special Characters.
* ' [ms]:                                ms Strings and Special Characters.
* * [ms]:                                ms Footnotes.
* *Q [ms]:                               ms Strings and Special Characters.
* *U [ms]:                               ms Strings and Special Characters.
* , [ms]:                                ms Strings and Special Characters.
* - [ms]:                                ms Strings and Special Characters.
* . [ms]:                                ms Strings and Special Characters.
* .T:                                    Built-in Registers.
* 3 [ms]:                                ms Strings and Special Characters.
* 8 [ms]:                                ms Strings and Special Characters.
* ? [ms]:                                ms Strings and Special Characters.
* \*[<colon>] [ms]:                      ms Strings and Special Characters.
* ^ [ms]:                                ms Strings and Special Characters.
* _ [ms]:                                ms Strings and Special Characters.
* ` [ms]:                                ms Strings and Special Characters.
* ABSTRACT [ms]:                         ms Strings and Special Characters.
* Ae [ms]:                               ms Strings and Special Characters.
* ae [ms]:                               ms Strings and Special Characters.
* CF [ms]:                               ms Headers and Footers.
* CH [ms]:                               ms Headers and Footers.
* d- [ms]:                               ms Strings and Special Characters.
* D- [ms]:                               ms Strings and Special Characters.
* HF [man]:                              Predefined man strings.
* LF [ms]:                               ms Headers and Footers.
* LH [ms]:                               ms Headers and Footers.
* lq [man]:                              Predefined man strings.
* MONTH1 [ms]:                           ms Strings and Special Characters.
* MONTH10 [ms]:                          ms Strings and Special Characters.
* MONTH11 [ms]:                          ms Strings and Special Characters.
* MONTH12 [ms]:                          ms Strings and Special Characters.
* MONTH2 [ms]:                           ms Strings and Special Characters.
* MONTH3 [ms]:                           ms Strings and Special Characters.
* MONTH4 [ms]:                           ms Strings and Special Characters.
* MONTH5 [ms]:                           ms Strings and Special Characters.
* MONTH6 [ms]:                           ms Strings and Special Characters.
* MONTH7 [ms]:                           ms Strings and Special Characters.
* MONTH8 [ms]:                           ms Strings and Special Characters.
* MONTH9 [ms]:                           ms Strings and Special Characters.
* o [ms]:                                ms Strings and Special Characters.
* q [ms]:                                ms Strings and Special Characters.
* R [man]:                               Predefined man strings.
* REFERENCES [ms]:                       ms Strings and Special Characters.
* RF [ms]:                               ms Headers and Footers.
* RH [ms]:                               ms Headers and Footers.
* rq [man]:                              Predefined man strings.
* S [man]:                               Predefined man strings.
* th [ms]:                               ms Strings and Special Characters.
* Th [ms]:                               ms Strings and Special Characters.
* Tm [man]:                              Predefined man strings.
* TOC [ms]:                              ms Strings and Special Characters.
* v [ms]:                                ms Strings and Special Characters.
* www-image-template [grohtml]:          grohtml specific registers and strings.
* ~ [ms]:                                ms Strings and Special Characters.


File: groff,  Node: Glyph Name Index,  Next: Font File Keyword Index,  Prev: String Index,  Up: Top

Glyph Name Index
****************

A glyph name `xx' consisting of exactly two characters can be accessed
as `\(xx'.  Glyph names `xxx' of any length can be accessed as `\[xxx]'.


File: groff,  Node: Font File Keyword Index,  Next: Program and File Index,  Prev: Glyph Name Index,  Up: Top

Font File Keyword Index
***********************

* Menu:

* #:                                     Font File Format.
* ---:                                   Font File Format.
* biggestfont:                           DESC File Format.
* charset <1>:                           Font File Format.
* charset:                               DESC File Format.
* family <1>:                            DESC File Format.
* family <2>:                            Font Positions.
* family:                                Changing Fonts.
* fonts <1>:                             DESC File Format.
* fonts <2>:                             Special Fonts.
* fonts:                                 Using Symbols.
* hor:                                   DESC File Format.
* kernpairs:                             Font File Format.
* ligatures:                             Font File Format.
* name:                                  Font File Format.
* papersize:                             DESC File Format.
* pass_filenames:                        DESC File Format.
* postpro:                               DESC File Format.
* prepro:                                DESC File Format.
* print:                                 DESC File Format.
* res:                                   DESC File Format.
* sizes:                                 DESC File Format.
* sizescale:                             DESC File Format.
* slant:                                 Font File Format.
* spacewidth:                            Font File Format.
* spare1:                                DESC File Format.
* spare2:                                DESC File Format.
* special <1>:                           Font File Format.
* special:                               Artificial Fonts.
* styles <1>:                            DESC File Format.
* styles <2>:                            Font Positions.
* styles <3>:                            Font Families.
* styles:                                Changing Fonts.
* tcommand:                              DESC File Format.
* unitwidth:                             DESC File Format.
* use_charnames_in_special <1>:          DESC File Format.
* use_charnames_in_special:              Postprocessor Access.
* vert:                                  DESC File Format.


File: groff,  Node: Program and File Index,  Next: Concept Index,  Prev: Font File Keyword Index,  Up: Top

Program and File Index
**********************

* Menu:

* an.tmac:                               man.
* changebar:                             Miscellaneous.
* composite.tmac:                        Using Symbols.
* cp1047.tmac:                           Input Encodings.
* DESC <1>:                              Special Fonts.
* DESC <2>:                              Using Symbols.
* DESC <3>:                              Font Positions.
* DESC <4>:                              Font Families.
* DESC:                                  Changing Fonts.
* DESC file format:                      DESC File Format.
* DESC, and font mounting:               Font Positions.
* DESC, and use_charnames_in_special:    Postprocessor Access.
* ditroff:                               History.
* ec.tmac:                               Input Encodings.
* eqn:                                   ms Insertions.
* freeeuro.pfa:                          Input Encodings.
* geqn:                                  Groff Options.
* geqn, invocation in manual pages:      Preprocessors in man pages.
* ggrn:                                  Groff Options.
* gpic:                                  Groff Options.
* grap:                                  Groff Options.
* grefer:                                Groff Options.
* grefer, invocation in manual pages:    Preprocessors in man pages.
* groff:                                 Groff Options.
* grog:                                  grog.
* grohtml:                               Miscellaneous man macros.
* gsoelim:                               Groff Options.
* gtbl:                                  Groff Options.
* gtbl, invocation in manual pages:      Preprocessors in man pages.
* gtroff:                                Groff Options.
* hyphen.us:                             Manipulating Hyphenation.
* hyphenex.us:                           Manipulating Hyphenation.
* latin1.tmac:                           Input Encodings.
* latin2.tmac:                           Input Encodings.
* latin9.tmac:                           Input Encodings.
* makeindex:                             Indices.
* man, invocation of preprocessors:      Preprocessors in man pages.
* man-old.tmac:                          man.
* man.local <1>:                         Optional man extensions.
* man.local:                             Man usage.
* man.tmac:                              man.
* man.ultrix:                            Optional man extensions.
* nrchbar:                               Miscellaneous.
* papersize.tmac:                        Paper Size.
* perl:                                  I/O.
* pic:                                   ms Insertions.
* post-grohtml:                          Groff Options.
* pre-grohtml:                           Groff Options.
* refer:                                 ms Insertions.
* soelim:                                Debugging.
* tbl:                                   ms Insertions.
* trace.tmac:                            Writing Macros.
* troffrc <1>:                           Line Layout.
* troffrc <2>:                           Troff and Nroff Mode.
* troffrc <3>:                           Manipulating Hyphenation.
* troffrc <4>:                           Paper Size.
* troffrc:                               Groff Options.
* troffrc-end <1>:                       Troff and Nroff Mode.
* troffrc-end <2>:                       Manipulating Hyphenation.
* troffrc-end:                           Groff Options.
* tty.tmac:                              Troff and Nroff Mode.


File: groff,  Node: Concept Index,  Prev: Program and File Index,  Up: Top

Concept Index
*************

* Menu:

* ", at end of sentence <1>:             Using Symbols.
* ", at end of sentence:                 Sentences.
* ", in a macro argument:                Request and Macro Arguments.
* %, as delimiter:                       Escapes.
* &, as delimiter:                       Escapes.
* ', as a comment:                       Comments.
* ', at end of sentence <1>:             Using Symbols.
* ', at end of sentence:                 Sentences.
* ', delimiting arguments:               Escapes.
* (, as delimiter:                       Escapes.
* (, starting a two-character identifier <1>: Escapes.
* (, starting a two-character identifier: Identifiers.
* ), as delimiter:                       Escapes.
* ), at end of sentence <1>:             Using Symbols.
* ), at end of sentence:                 Sentences.
* *, as delimiter:                       Escapes.
* *, at end of sentence <1>:             Using Symbols.
* *, at end of sentence:                 Sentences.
* +, and page motion:                    Expressions.
* +, as delimiter:                       Escapes.
* -, and page motion:                    Expressions.
* -, as delimiter:                       Escapes.
* ., as delimiter:                       Escapes.
* .h register, difference to nl:         Diversions.
* .ps register, in comparison with .psr: Fractional Type Sizes.
* .s register, in comparison with .sr:   Fractional Type Sizes.
* .S register, Plan 9 alias for .tabs:   Tabs and Fields.
* .t register, and diversions:           Diversion Traps.
* .tabs register, Plan 9 alias (.S):     Tabs and Fields.
* .V register, and vs:                   Changing Type Sizes.
* /, as delimiter:                       Escapes.
* 8-bit input:                           Font File Format.
* <, as delimiter:                       Escapes.
* <colon>, as delimiter:                 Escapes.
* =, as delimiter:                       Escapes.
* >, as delimiter:                       Escapes.
* [, macro names starting with, and refer: Identifiers.
* [, starting an identifier <1>:         Escapes.
* [, starting an identifier:             Identifiers.
* \!, and output:                        Diversions.
* \!, and trnt:                          Character Translations.
* \!, in top-level diversion:            Diversions.
* \!, incompatibilities with AT&T troff: Implementation Differences.
* \!, used as delimiter:                 Escapes.
* \$, when reading text for a macro:     Copy-in Mode.
* \%, and translations:                  Character Translations.
* \%, following \X or \Y:                Manipulating Hyphenation.
* \%, in \X:                             Postprocessor Access.
* \%, incompatibilities with AT&T troff: Implementation Differences.
* \%, used as delimiter:                 Escapes.
* \&, and glyph definitions:             Using Symbols.
* \&, and translations:                  Character Translations.
* \&, at end of sentence:                Sentences.
* \&, escaping control characters:       Requests.
* \&, in \X:                             Postprocessor Access.
* \&, incompatibilities with AT&T troff: Implementation Differences.
* \&, used as delimiter:                 Escapes.
* \', and translations:                  Character Translations.
* \', incompatibilities with AT&T troff: Implementation Differences.
* \', used as delimiter:                 Escapes.
* \(, and translations:                  Character Translations.
* \), in \X:                             Postprocessor Access.
* \), used as delimiter:                 Escapes.
* \*, and warnings:                      Warnings.
* \*, incompatibilities with AT&T troff: Implementation Differences.
* \*, when reading text for a macro:     Copy-in Mode.
* \, disabling (eo):                     Character Translations.
* \,, used as delimiter:                 Escapes.
* \-, and translations:                  Character Translations.
* \-, incompatibilities with AT&T troff: Implementation Differences.
* \-, used as delimiter:                 Escapes.
* \/, used as delimiter:                 Escapes.
* \0, used as delimiter:                 Escapes.
* \<colon>, in \X:                       Postprocessor Access.
* \<colon>, used as delimiter:           Escapes.
* \<RET>, when reading text for a macro: Copy-in Mode.
* \<SP>, difference to \~:               Request and Macro Arguments.
* \<SP>, incompatibilities with AT&T troff: Implementation Differences.
* \<SP>, used as delimiter:              Escapes.
* \?, in top-level diversion:            Diversions.
* \?, incompatibilities with AT&T troff: Implementation Differences.
* \?, used as delimiter:                 Escapes.
* \@, used as delimiter:                 Escapes.
* \[, and translations:                  Character Translations.
* \\, when reading text for a macro:     Copy-in Mode.
* \^, incompatibilities with AT&T troff: Implementation Differences.
* \^, used as delimiter:                 Escapes.
* \_, and translations:                  Character Translations.
* \_, incompatibilities with AT&T troff: Implementation Differences.
* \_, used as delimiter:                 Escapes.
* \`, and translations:                  Character Translations.
* \`, incompatibilities with AT&T troff: Implementation Differences.
* \`, used as delimiter:                 Escapes.
* \A, allowed delimiters:                Escapes.
* \a, and translations:                  Character Translations.
* \A, incompatibilities with AT&T troff: Implementation Differences.
* \a, used as delimiter:                 Escapes.
* \B, allowed delimiters:                Escapes.
* \b, limitations:                       Drawing Requests.
* \b, possible quote characters:         Escapes.
* \C, allowed delimiters:                Escapes.
* \c, and fill mode:                     Line Control.
* \c, and no-fill mode:                  Line Control.
* \C, and translations:                  Character Translations.
* \c, incompatibilities with AT&T troff: Implementation Differences.
* \c, used as delimiter:                 Escapes.
* \D'f ...' and horizontal resolution:   Drawing Requests.
* \D, allowed delimiters:                Escapes.
* \d, used as delimiter:                 Escapes.
* \e, and glyph definitions:             Using Symbols.
* \e, and translations:                  Character Translations.
* \e, incompatibilities with AT&T troff: Implementation Differences.
* \e, used as delimiter:                 Escapes.
* \E, used as delimiter:                 Escapes.
* \e, used as delimiter:                 Escapes.
* \F, and changing fonts:                Changing Fonts.
* \F, and font positions:                Font Positions.
* \f, and font translations:             Changing Fonts.
* \f, incompatibilities with AT&T troff: Implementation Differences.
* \H, allowed delimiters:                Escapes.
* \h, allowed delimiters:                Escapes.
* \H, incompatibilities with AT&T troff: Implementation Differences.
* \H, using + and -:                     Expressions.
* \H, with fractional type sizes:        Fractional Type Sizes.
* \L, allowed delimiters:                Escapes.
* \l, allowed delimiters:                Escapes.
* \L, and glyph definitions:             Using Symbols.
* \l, and glyph definitions:             Using Symbols.
* \N, allowed delimiters:                Escapes.
* \N, and translations:                  Character Translations.
* \n, and warnings:                      Warnings.
* \n, incompatibilities with AT&T troff: Implementation Differences.
* \n, when reading text for a macro:     Copy-in Mode.
* \o, possible quote characters:         Escapes.
* \p, used as delimiter:                 Escapes.
* \R, after \c:                          Line Control.
* \R, allowed delimiters:                Escapes.
* \R, and warnings:                      Warnings.
* \R, difference to nr:                  Auto-increment.
* \r, used as delimiter:                 Escapes.
* \R, using + and -:                     Expressions.
* \S, allowed delimiters:                Escapes.
* \s, allowed delimiters:                Escapes.
* \S, incompatibilities with AT&T troff: Implementation Differences.
* \s, incompatibilities with AT&T troff: Implementation Differences.
* \s, using + and -:                     Expressions.
* \s, with fractional type sizes:        Fractional Type Sizes.
* \t, and translations:                  Character Translations.
* \t, and warnings:                      Warnings.
* \t, used as delimiter:                 Escapes.
* \u, used as delimiter:                 Escapes.
* \v, allowed delimiters:                Escapes.
* \v, internal representation:           Gtroff Internals.
* \w, allowed delimiters:                Escapes.
* \x, allowed delimiters:                Escapes.
* \X, and special characters:            Postprocessor Access.
* \X, followed by \%:                    Manipulating Hyphenation.
* \X, possible quote characters:         Escapes.
* \Y, followed by \%:                    Manipulating Hyphenation.
* \Z, allowed delimiters:                Escapes.
* \{, incompatibilities with AT&T troff: Implementation Differences.
* \{, used as delimiter:                 Escapes.
* \|, incompatibilities with AT&T troff: Implementation Differences.
* \|, used as delimiter:                 Escapes.
* \}, and warnings:                      Warnings.
* \}, incompatibilities with AT&T troff: Implementation Differences.
* \}, used as delimiter:                 Escapes.
* \~, and translations:                  Character Translations.
* \~, difference to \<SP>:               Request and Macro Arguments.
* \~, used as delimiter:                 Escapes.
* ], as part of an identifier:           Identifiers.
* ], at end of sentence <1>:             Using Symbols.
* ], at end of sentence:                 Sentences.
* ], ending an identifier <1>:           Escapes.
* ], ending an identifier:               Identifiers.
* ], macro names starting with, and refer: Identifiers.
* aborting (ab):                         Debugging.
* absolute position operator (|):        Expressions.
* accent marks [ms]:                     ms Strings and Special Characters.
* access of postprocessor:               Postprocessor Access.
* accessing unnamed glyphs with \N:      Font File Format.
* activating kerning (kern):             Ligatures and Kerning.
* activating ligatures (lg):             Ligatures and Kerning.
* activating track kerning (tkf):        Ligatures and Kerning.
* ad request, and hyphenation margin:    Manipulating Hyphenation.
* ad request, and hyphenation space:     Manipulating Hyphenation.
* adjusting:                             Filling and Adjusting.
* adjusting and filling, manipulating:   Manipulating Filling and Adjusting.
* adjustment mode register (.j):         Manipulating Filling and Adjusting.
* adobe glyph list (AGL):                Using Symbols.
* AGL (adobe glyph list):                Using Symbols.
* alias, diversion, creating (als):      Strings.
* alias, macro, creating (als):          Strings.
* alias, number register, creating (aln): Setting Registers.
* alias, string, creating (als):         Strings.
* als request, and \$0:                  Parameters.
* am, am1, ami requests, and warnings:   Warnings.
* annotations:                           Footnotes and Annotations.
* appending to a diversion (da):         Diversions.
* appending to a file (opena):           I/O.
* appending to a macro (am):             Writing Macros.
* appending to a string (as):            Strings.
* arc, drawing (\D'a ...'):              Drawing Requests.
* argument delimiting characters:        Escapes.
* arguments to requests and macros:      Request and Macro Arguments.
* arguments, macro (\$):                 Parameters.
* arguments, of strings:                 Strings.
* arithmetic operators:                  Expressions.
* artificial fonts:                      Artificial Fonts.
* as, as1 requests, and comments:        Comments.
* as, as1 requests, and warnings:        Warnings.
* ASCII approximation output register (.A) <1>: Built-in Registers.
* ASCII approximation output register (.A): Groff Options.
* ASCII, output encoding:                Groff Options.
* asciify request, and writem:           I/O.
* assigning formats (af):                Assigning Formats.
* assignments, indirect:                 Interpolating Registers.
* assignments, nested:                   Interpolating Registers.
* AT&T troff, ms macro package differences: Differences from AT&T ms.
* auto-increment:                        Auto-increment.
* available glyphs, list (`groff_char(7)' man page): Using Symbols.
* background color name register (.M):   Colors.
* backslash, printing (\\, \e, \E, \[rs]) <1>: Implementation Differences.
* backslash, printing (\\, \e, \E, \[rs]): Escapes.
* backspace character:                   Identifiers.
* backspace character, and translations: Character Translations.
* backtrace of input stack (backtrace):  Debugging.
* baseline:                              Sizes.
* basic unit (u):                        Measurements.
* basics of macros:                      Basics.
* bd request, and font styles:           Font Families.
* bd request, and font translations:     Changing Fonts.
* bd request, incompatibilities with AT&T troff: Implementation Differences.
* begin of conditional block (\{):       if-else.
* beginning diversion (di):              Diversions.
* blank line <1>:                        Requests.
* blank line:                            Implicit Line Breaks.
* blank line (sp):                       Basics.
* blank line macro (blm) <1>:            Blank Line Traps.
* blank line macro (blm) <2>:            Requests.
* blank line macro (blm):                Implicit Line Breaks.
* blank line traps:                      Blank Line Traps.
* blank lines, disabling:                Manipulating Spacing.
* block, conditional, begin (\{):        if-else.
* block, condititional, end (\}):        if-else.
* bold face [man]:                       Man font macros.
* bold face, imitating (bd):             Artificial Fonts.
* bottom margin:                         Page Layout.
* bounding box:                          Miscellaneous.
* box rule glyph (\[br]):                Drawing Requests.
* box, boxa requests, and warnings:      Warnings.
* boxa request, and dn (dl):             Diversions.
* bp request, and top-level diversion:   Page Control.
* bp request, and traps (.pe):           Page Location Traps.
* bp request, causing implicit linebreak: Manipulating Filling and Adjusting.
* bp request, using + and -:             Expressions.
* br glyph, and cflags:                  Using Symbols.
* break <1>:                             Manipulating Filling and Adjusting.
* break:                                 Basics.
* break (br):                            Basics.
* break request, in a while loop:        while.
* break, implicit:                       Implicit Line Breaks.
* built-in registers:                    Built-in Registers.
* bulleted list, example markup [ms]:    Lists in ms.
* c unit:                                Measurements.
* calling convention of preprocessors:   Preprocessors in man pages.
* capabilities of groff:                 groff Capabilities.
* ce request, causing implicit linebreak: Manipulating Filling and Adjusting.
* ce request, difference to .ad c:       Manipulating Filling and Adjusting.
* centered text:                         Manipulating Filling and Adjusting.
* centering lines (ce) <1>:              Manipulating Filling and Adjusting.
* centering lines (ce):                  Basics.
* centimeter unit (c):                   Measurements.
* cf request, causing implicit linebreak: Manipulating Filling and Adjusting.
* changing font family (fam, \F):        Font Families.
* changing font position (\f):           Font Positions.
* changing font style (sty):             Font Families.
* changing fonts (ft, \f):               Changing Fonts.
* changing format, and read-only registers: Assigning Formats.
* changing the font height (\H):         Artificial Fonts.
* changing the font slant (\S):          Artificial Fonts.
* changing the page number character (pc): Page Layout.
* changing trap location (ch):           Page Location Traps.
* changing type sizes (ps, \s):          Changing Type Sizes.
* changing vertical line spacing (vs):   Changing Type Sizes.
* char request, and soft hyphen character: Manipulating Hyphenation.
* char request, and translations:        Character Translations.
* char request, used with \N:            Using Symbols.
* character:                             Using Symbols.
* character properties (cflags):         Using Symbols.
* character translations:                Character Translations.
* character, backspace:                  Identifiers.
* character, backspace, and translations: Character Translations.
* character, control (.):                Requests.
* character, control, changing (cc):     Character Translations.
* character, defining (char):            Using Symbols.
* character, defining fallback (fchar, fschar, schar): Using Symbols.
* character, escape, changing (ec):      Character Translations.
* character, escape, while defining glyph: Using Symbols.
* character, field delimiting (fc):      Fields.
* character, field padding (fc):         Fields.
* character, hyphenation (\%):           Manipulating Hyphenation.
* character, leader repetition (lc):     Leaders.
* character, leader, and translations:   Character Translations.
* character, leader, non-interpreted (\a): Leaders.
* character, named (\C):                 Using Symbols.
* character, newline:                    Escapes.
* character, newline, and translations:  Character Translations.
* character, no-break control ('):       Requests.
* character, no-break control, changing (c2): Character Translations.
* character, soft hyphen, setting (shc): Manipulating Hyphenation.
* character, space:                      Escapes.
* character, special:                    Character Translations.
* character, tab:                        Escapes.
* character, tab repetition (tc):        Tabs and Fields.
* character, tab, and translations:      Character Translations.
* character, tab, non-interpreted (\t):  Tabs and Fields.
* character, tabulator:                  Tab Stops.
* character, transparent <1>:            Using Symbols.
* character, transparent:                Sentences.
* character, whitespace:                 Identifiers.
* character, zero width space (\&) <1>:  Drawing Requests.
* character, zero width space (\&) <2>:  Ligatures and Kerning.
* character, zero width space (\&):      Requests.
* characters, argument delimiting:       Escapes.
* characters, end-of-sentence:           Using Symbols.
* characters, hyphenation:               Using Symbols.
* characters, input, and output glyphs, compatibility with AT&T troff: Implementation Differences.
* characters, invalid for trf request:   I/O.
* characters, invalid input:             Identifiers.
* characters, overlapping:               Using Symbols.
* characters, special:                   Special Characters.
* characters, unnamed, accessing with \N: Font File Format.
* circle, drawing (\D'c ...'):           Drawing Requests.
* circle, solid, drawing (\D'C ...'):    Drawing Requests.
* closing file (close):                  I/O.
* code, hyphenation (hcode):             Manipulating Hyphenation.
* color name, background, register (.M): Colors.
* color name, drawing, register (.m):    Colors.
* color, default:                        Colors.
* colors:                                Colors.
* colors, fill, unnamed (\D'F...'):      Drawing Requests.
* command prefix:                        Environment.
* command-line options:                  Groff Options.
* commands, embedded:                    Embedded Commands.
* comments:                              Comments.
* comments in font files:                Font File Format.
* comments, lining up with tabs:         Comments.
* comments, with ds:                     Strings.
* common features:                       Common Features.
* common name space of macros, diversions, and strings: Strings.
* comparison operators:                  Expressions.
* compatibility mode <1>:                Implementation Differences.
* compatibility mode:                    Warnings.
* composite glyph names:                 Using Symbols.
* conditional block, begin (\{):         if-else.
* conditional block, end (\}):           if-else.
* conditional page break (ne):           Page Control.
* conditionals and loops:                Conditionals and Loops.
* consecutive hyphenated lines (hlm):    Manipulating Hyphenation.
* constant glyph space mode (cs):        Artificial Fonts.
* contents, table of <1>:                Leaders.
* contents, table of:                    Table of Contents.
* continuation, input line (\):          Line Control.
* continuation, output line (\c):        Line Control.
* continue request, in a while loop:     while.
* continuous underlining (cu):           Artificial Fonts.
* control character (.):                 Requests.
* control character, changing (cc):      Character Translations.
* control character, no-break ('):       Requests.
* control character, no-break, changing (c2): Character Translations.
* control, line:                         Line Control.
* control, page:                         Page Control.
* conventions for input:                 Input Conventions.
* copy-in mode:                          Copy-in Mode.
* copy-in mode, and macro arguments:     Parameters.
* copy-in mode, and write requests:      I/O.
* copying environment (evc):             Environments.
* correction between italic and roman glyph (\/, \,): Ligatures and Kerning.
* correction, italic (\/):               Ligatures and Kerning.
* correction, left italic (\,):          Ligatures and Kerning.
* cover page macros, [ms]:               ms Cover Page Macros.
* cp request, and glyph definitions:     Using Symbols.
* cp1047, input encoding:                Input Encodings.
* cp1047, output encoding:               Groff Options.
* creating alias, for diversion (als):   Strings.
* creating alias, for macro (als):       Strings.
* creating alias, for number register (aln): Setting Registers.
* creating alias, for string (als):      Strings.
* creating new characters (char):        Using Symbols.
* credits:                               Credits.
* cs request, and font styles:           Font Families.
* cs request, and font translations:     Changing Fonts.
* cs request, incompatibilities with AT&T troff: Implementation Differences.
* cs request, with fractional type sizes: Fractional Type Sizes.
* current directory:                     Macro Directories.
* current input file name register (.F): Built-in Registers.
* current page number (%):               Page Control.
* current time:                          I/O.
* current time, hours (hours):           Built-in Registers.
* current time, minutes (minutes):       Built-in Registers.
* current time, seconds (seconds):       Built-in Registers.
* current vertical position (nl):        Page Control.
* da request, and dn (dl):               Diversions.
* da request, and warnings:              Warnings.
* date, day of the month register (dy):  Built-in Registers.
* date, day of the week register (dw):   Built-in Registers.
* date, month of the year register (mo): Built-in Registers.
* date, year register (year, yr):        Built-in Registers.
* day of the month register (dy):        Built-in Registers.
* day of the week register (dw):         Built-in Registers.
* de request, and while:                 while.
* de, de1, dei requests, and warnings:   Warnings.
* debugging:                             Debugging.
* default color:                         Colors.
* default indentation [man]:             Miscellaneous man macros.
* default indentation, resetting [man]:  Man usage.
* default units:                         Default Units.
* defining character (char):             Using Symbols.
* defining fallback character (fchar, fschar, schar): Using Symbols.
* defining glyph (char):                 Using Symbols.
* defining symbol (char):                Using Symbols.
* delayed text:                          Footnotes and Annotations.
* delimited arguments, incompatibilities with AT&T troff: Implementation Differences.
* delimiting character, for fields (fc): Fields.
* delimiting characters for arguments:   Escapes.
* depth, of last glyph (.cdp):           Environments.
* DESC file, format:                     DESC File Format.
* device resolution:                     DESC File Format.
* devices for output <1>:                Output Devices.
* devices for output:                    Output device intro.
* dg glyph, at end of sentence <1>:      Using Symbols.
* dg glyph, at end of sentence:          Sentences.
* di request, and warnings:              Warnings.
* differences in implementation:         Implementation Differences.
* digit width space (\0):                Page Motions.
* digits, and delimiters:                Escapes.
* dimensions, line:                      Line Layout.
* directories for fonts:                 Font Directories.
* directories for macros:                Macro Directories.
* directory, current:                    Macro Directories.
* directory, for tmac files:             Macro Directories.
* directory, home:                       Macro Directories.
* directory, platform-specific:          Macro Directories.
* directory, site-specific <1>:          Font Directories.
* directory, site-specific:              Macro Directories.
* disabling \ (eo):                      Character Translations.
* disabling hyphenation (\%):            Manipulating Hyphenation.
* discardable horizontal space:          Manipulating Filling and Adjusting.
* discarded space in traps:              Manipulating Spacing.
* displays:                              Displays.
* displays [ms]:                         ms Displays and Keeps.
* distance to next trap register (.t):   Page Location Traps.
* ditroff, the program:                  History.
* diversion name register (.z):          Diversions.
* diversion trap, setting (dt):          Diversion Traps.
* diversion traps:                       Diversion Traps.
* diversion, appending (da):             Diversions.
* diversion, beginning (di):             Diversions.
* diversion, creating alias (als):       Strings.
* diversion, ending (di):                Diversions.
* diversion, nested:                     Diversions.
* diversion, removing (rm):              Strings.
* diversion, renaming (rn):              Strings.
* diversion, stripping final newline:    Strings.
* diversion, top-level:                  Diversions.
* diversion, top-level, and \!:          Diversions.
* diversion, top-level, and \?:          Diversions.
* diversion, top-level, and bp:          Page Control.
* diversion, unformatting (asciify):     Diversions.
* diversion, vertical position in, register (.d): Diversions.
* diversions:                            Diversions.
* diversions, and traps:                 Page Location Traps.
* diversions, shared name space with macros and strings: Strings.
* dl register, and da (boxa):            Diversions.
* dn register, and da (boxa):            Diversions.
* documents, multi-file:                 Debugging.
* documents, structuring the source code: Requests.
* double quote, in a macro argument:     Request and Macro Arguments.
* double-spacing (ls) <1>:               Manipulating Spacing.
* double-spacing (ls):                   Basics.
* double-spacing (vs, pvs):              Changing Type Sizes.
* drawing a circle (\D'c ...'):          Drawing Requests.
* drawing a line (\D'l ...'):            Drawing Requests.
* drawing a polygon (\D'p ...'):         Drawing Requests.
* drawing a solid circle (\D'C ...'):    Drawing Requests.
* drawing a solid ellipse (\D'E ...'):   Drawing Requests.
* drawing a solid polygon (\D'P ...'):   Drawing Requests.
* drawing a spline (\D'~ ...'):          Drawing Requests.
* drawing an arc (\D'a ...'):            Drawing Requests.
* drawing an ellipse (\D'e ...'):        Drawing Requests.
* drawing color name register (.m):      Colors.
* drawing horizontal lines (\l):         Drawing Requests.
* drawing requests:                      Drawing Requests.
* drawing vertical lines (\L):           Drawing Requests.
* ds request, and comments:              Strings.
* ds request, and double quotes:         Request and Macro Arguments.
* ds request, and leading spaces:        Strings.
* ds, ds1 requests, and comments:        Comments.
* ds, ds1 requests, and warnings:        Warnings.
* dumping number registers (pnr):        Debugging.
* dumping symbol table (pm):             Debugging.
* dumping traps (ptr):                   Debugging.
* EBCDIC encoding:                       Tab Stops.
* EBCDIC encoding of a tab:              Tabs and Fields.
* EBCDIC encoding of backspace:          Identifiers.
* EBCDIC, input encoding:                Input Encodings.
* EBCDIC, output encoding:               Groff Options.
* el request, and warnings:              Warnings.
* ellipse, drawing (\D'e ...'):          Drawing Requests.
* ellipse, solid, drawing (\D'E ...'):   Drawing Requests.
* em glyph, and cflags:                  Using Symbols.
* em unit (m):                           Measurements.
* embedded commands:                     Embedded Commands.
* embedding PostScript:                  Embedding PostScript.
* embolding of special fonts:            Artificial Fonts.
* empty line:                            Implicit Line Breaks.
* empty line (sp):                       Basics.
* empty space before a paragraph [man]:  Miscellaneous man macros.
* en unit (n):                           Measurements.
* enabling vertical position traps (vpt): Page Location Traps.
* encoding, EBCDIC:                      Tab Stops.
* encoding, input, cp1047:               Input Encodings.
* encoding, input, EBCDIC:               Input Encodings.
* encoding, input, latin-1 (ISO 8859-1): Input Encodings.
* encoding, input, latin-2 (ISO 8859-2): Input Encodings.
* encoding, input, latin-9 (latin-0, ISO 8859-15): Input Encodings.
* encoding, output, ASCII:               Groff Options.
* encoding, output, cp1047:              Groff Options.
* encoding, output, EBCDIC:              Groff Options.
* encoding, output, latin-1 (ISO 8859-1): Groff Options.
* encoding, output, utf-8:               Groff Options.
* end of conditional block (\}):         if-else.
* end-of-input macro (em):               End-of-input Traps.
* end-of-input trap, setting (em):       End-of-input Traps.
* end-of-input traps:                    End-of-input Traps.
* end-of-sentence characters:            Using Symbols.
* ending diversion (di):                 Diversions.
* environment number/name register (.ev): Environments.
* environment variables:                 Environment.
* environment, copying (evc):            Environments.
* environment, dimensions of last glyph (.w, .cht, .cdp, .csk): Environments.
* environment, previous line length (.n): Environments.
* environment, switching (ev):           Environments.
* environments:                          Environments.
* eqn, the program:                      geqn.
* equations [ms]:                        ms Insertions.
* escape character, changing (ec):       Character Translations.
* escape character, while defining glyph: Using Symbols.
* escapes:                               Escapes.
* escaping newline characters, in strings: Strings.
* ex request, use in debugging:          Debugging.
* ex request, used with nx and rd:       I/O.
* example markup, bulleted list [ms]:    Lists in ms.
* example markup, glossary-style list [ms]: Lists in ms.
* example markup, multi-page table [ms]: Example multi-page table.
* example markup, numbered list [ms]:    Lists in ms.
* example markup, title page:            ms Cover Page Macros.
* examples of invocation:                Invocation Examples.
* exiting (ex):                          Debugging.
* expansion of strings (\*):             Strings.
* explicit hyphen (\%):                  Manipulating Hyphenation.
* expression, order of evaluation:       Expressions.
* expressions:                           Expressions.
* expressions, and space characters:     Expressions.
* extra post-vertical line space (\x):   Changing Type Sizes.
* extra post-vertical line space register (.a): Manipulating Spacing.
* extra pre-vertical line space (\x):    Changing Type Sizes.
* extra spaces:                          Filling and Adjusting.
* extremum operators (>?, <?):           Expressions.
* f unit:                                Measurements.
* f unit, and colors:                    Colors.
* fallback character, defining (fchar, fschar, schar): Using Symbols.
* fallback glyph, removing definition (rchar, rfschar): Using Symbols.
* fam request, and changing fonts:       Changing Fonts.
* fam request, and font positions:       Font Positions.
* families, font:                        Font Families.
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
* features, common:                      Common Features.
* fi request, causing implicit linebreak: Manipulating Filling and Adjusting.
* field delimiting character (fc):       Fields.
* field padding character (fc):          Fields.
* fields:                                Fields.
* fields, and tabs:                      Tabs and Fields.
* figures [ms]:                          ms Insertions.
* file formats:                          File formats.
* file, appending to (opena):            I/O.
* file, closing (close):                 I/O.
* file, inclusion (so):                  I/O.
* file, opening (open):                  I/O.
* file, processing next (nx):            I/O.
* file, writing to (write):              I/O.
* files, font:                           Font Files.
* files, macro, searching:               Macro Directories.
* fill colors, unnamed (\D'F...'):       Drawing Requests.
* fill mode <1>:                         Warnings.
* fill mode <2>:                         Manipulating Filling and Adjusting.
* fill mode:                             Implicit Line Breaks.
* fill mode (fi):                        Manipulating Filling and Adjusting.
* fill mode, and \c:                     Line Control.
* filling:                               Filling and Adjusting.
* filling and adjusting, manipulating:   Manipulating Filling and Adjusting.
* final newline, stripping in diversions: Strings.
* fl request, causing implicit linebreak: Manipulating Filling and Adjusting.
* floating keep:                         Displays.
* flush output (fl):                     Debugging.
* font description file, format <1>:     Font File Format.
* font description file, format:         DESC File Format.
* font directories:                      Font Directories.
* font families:                         Font Families.
* font family, changing (fam, \F):       Font Families.
* font file, format:                     Font File Format.
* font files:                            Font Files.
* font files, comments:                  Font File Format.
* font for underlining (uf):             Artificial Fonts.
* font height, changing (\H):            Artificial Fonts.
* font path:                             Font Directories.
* font position register (.f):           Font Positions.
* font position, changing (\f):          Font Positions.
* font positions:                        Font Positions.
* font selection [man]:                  Man font macros.
* font slant, changing (\S):             Artificial Fonts.
* font style, changing (sty):            Font Families.
* font styles:                           Font Families.
* font, mounting (fp):                   Font Positions.
* font, previous (ft, \f[], \fP):        Changing Fonts.
* fonts <1>:                             Changing Fonts.
* fonts:                                 Fonts and Symbols.
* fonts, artificial:                     Artificial Fonts.
* fonts, changing (ft, \f):              Changing Fonts.
* fonts, PostScript:                     Font Families.
* fonts, searching:                      Font Directories.
* fonts, special:                        Special Fonts.
* footers <1>:                           Page Location Traps.
* footers:                               Page Layout.
* footers [ms]:                          ms Headers and Footers.
* footnotes:                             Footnotes and Annotations.
* footnotes [ms]:                        ms Footnotes.
* form letters:                          I/O.
* format of font description file:       DESC File Format.
* format of font description files:      Font File Format.
* format of font files:                  Font File Format.
* format of register (\g):               Assigning Formats.
* formats, assigning (af):               Assigning Formats.
* formats, file:                         File formats.
* fp request, and font translations:     Changing Fonts.
* fp request, incompatibilities with AT&T troff: Implementation Differences.
* fractional point sizes <1>:            Implementation Differences.
* fractional point sizes:                Fractional Type Sizes.
* fractional type sizes <1>:             Implementation Differences.
* fractional type sizes:                 Fractional Type Sizes.
* french-spacing:                        Sentences.
* fspecial request, and font styles:     Font Families.
* fspecial request, and font translations: Changing Fonts.
* fspecial request, and glyph search order: Using Symbols.
* fspecial request, and imitating bold:  Artificial Fonts.
* ft request, and font translations:     Changing Fonts.
* geqn, invoking:                        Invoking geqn.
* geqn, the program:                     geqn.
* GGL (groff glyph list):                Using Symbols.
* ggrn, invoking:                        Invoking ggrn.
* ggrn, the program:                     ggrn.
* glossary-style list, example markup [ms]: Lists in ms.
* glyph:                                 Using Symbols.
* glyph for line drawing:                Drawing Requests.
* glyph names, composite:                Using Symbols.
* glyph pile (\b):                       Drawing Requests.
* glyph properties (cflags):             Using Symbols.
* glyph, box rule (\[br]):               Drawing Requests.
* glyph, constant space:                 Artificial Fonts.
* glyph, defining (char):                Using Symbols.
* glyph, for line drawing:               Drawing Requests.
* glyph, for margins (mc):               Miscellaneous.
* glyph, italic correction (\/):         Ligatures and Kerning.
* glyph, last, dimensions (.w, .cht, .cdp, .csk): Environments.
* glyph, leader repetition (lc):         Leaders.
* glyph, left italic correction (\,):    Ligatures and Kerning.
* glyph, numbered (\N) <1>:              Using Symbols.
* glyph, numbered (\N):                  Character Translations.
* glyph, removing definition (rchar, rfschar): Using Symbols.
* glyph, soft hyphen (hy):               Manipulating Hyphenation.
* glyph, tab repetition (tc):            Tabs and Fields.
* glyph, underscore (\[ru]):             Drawing Requests.
* glyphs, available, list (`groff_char(7)' man page): Using Symbols.
* glyphs, output, and input characters, compatibility with AT&T troff: Implementation Differences.
* glyphs, overstriking (\o):             Page Motions.
* glyphs, unnamed:                       Using Symbols.
* glyphs, unnamed, accessing with \N:    Font File Format.
* GNU-specific register (.g):            Built-in Registers.
* gpic, invoking:                        Invoking gpic.
* gpic, the program:                     gpic.
* grap, the program:                     grap.
* gray shading (\D'f ...'):              Drawing Requests.
* grefer, invoking:                      Invoking grefer.
* grefer, the program:                   grefer.
* grn, the program:                      ggrn.
* grodvi, invoking:                      Invoking grodvi.
* grodvi, the program:                   grodvi.
* groff - what is it?:                   What Is groff?.
* groff capabilities:                    groff Capabilities.
* groff glyph list (GGL):                Using Symbols.
* groff invocation:                      Invoking groff.
* groff, and pi request:                 I/O.
* GROFF_BIN_PATH, environment variable:  Environment.
* GROFF_COMMAND_PREFIX, environment variable: Environment.
* GROFF_FONT_PATH, environment variable <1>: Font Directories.
* GROFF_FONT_PATH, environment variable: Environment.
* GROFF_TMAC_PATH, environment variable <1>: Macro Directories.
* GROFF_TMAC_PATH, environment variable: Environment.
* GROFF_TMPDIR, environment variable:    Environment.
* GROFF_TYPESETTER, environment variable: Environment.
* grohtml, invoking:                     Invoking grohtml.
* grohtml, registers and strings:        grohtml specific registers and strings.
* grohtml, the program <1>:              grohtml.
* grohtml, the program:                  Groff Options.
* grolbp, invoking:                      Invoking grolbp.
* grolbp, the program:                   grolbp.
* grolj4, invoking:                      Invoking grolj4.
* grolj4, the program:                   grolj4.
* grops, invoking:                       Invoking grops.
* grops, the program:                    grops.
* grotty, invoking:                      Invoking grotty.
* grotty, the program:                   grotty.
* gsoelim, invoking:                     Invoking gsoelim.
* gsoelim, the program:                  gsoelim.
* gtbl, invoking:                        Invoking gtbl.
* gtbl, the program:                     gtbl.
* gtroff, identification register (.g):  Built-in Registers.
* gtroff, interactive use:               Debugging.
* gtroff, output:                        gtroff Output.
* gtroff, process ID register ($$):      Built-in Registers.
* gtroff, reference:                     gtroff Reference.
* gxditview, invoking:                   Invoking gxditview.
* gxditview, the program:                gxditview.
* hanging indentation [man]:             Man usage.
* hcode request, and glyph definitions:  Using Symbols.
* headers <1>:                           Page Location Traps.
* headers:                               Page Layout.
* headers [ms]:                          ms Headers and Footers.
* height, font, changing (\H):           Artificial Fonts.
* height, of last glyph (.cht):          Environments.
* high-water mark register (.h):         Diversions.
* history:                               History.
* home directory:                        Macro Directories.
* horizontal discardable space:          Manipulating Filling and Adjusting.
* horizontal input line position register (hp): Page Motions.
* horizontal input line position, saving (\k): Page Motions.
* horizontal line, drawing (\l):         Drawing Requests.
* horizontal motion (\h):                Page Motions.
* horizontal output line position register (.k): Page Motions.
* horizontal resolution:                 DESC File Format.
* horizontal resolution register (.H):   Built-in Registers.
* horizontal space (\h):                 Page Motions.
* horizontal space, unformatting:        Strings.
* hours, current time (hours):           Built-in Registers.
* hpf request, and hyphenation language: Manipulating Hyphenation.
* hw request, and hyphenation language:  Manipulating Hyphenation.
* hy glyph, and cflags:                  Using Symbols.
* hyphen, explicit (\%):                 Manipulating Hyphenation.
* hyphenated lines, consecutive (hlm):   Manipulating Hyphenation.
* hyphenating characters:                Using Symbols.
* hyphenation:                           Hyphenation.
* hyphenation character (\%):            Manipulating Hyphenation.
* hyphenation code (hcode):              Manipulating Hyphenation.
* hyphenation language register (.hla):  Manipulating Hyphenation.
* hyphenation margin (hym):              Manipulating Hyphenation.
* hyphenation margin register (.hym):    Manipulating Hyphenation.
* hyphenation patterns (hpf):            Manipulating Hyphenation.
* hyphenation restrictions register (.hy): Manipulating Hyphenation.
* hyphenation space (hys):               Manipulating Hyphenation.
* hyphenation space register (.hys):     Manipulating Hyphenation.
* hyphenation, disabling (\%):           Manipulating Hyphenation.
* hyphenation, manipulating:             Manipulating Hyphenation.
* i unit:                                Measurements.
* i/o:                                   I/O.
* IBM cp1047 input encoding:             Input Encodings.
* IBM cp1047 output encoding:            Groff Options.
* identifiers:                           Identifiers.
* identifiers, undefined:                Identifiers.
* ie request, and warnings:              Warnings.
* if request, and the ! operator:        Expressions.
* if request, operators to use with:     Operators in Conditionals.
* if-else:                               if-else.
* imitating bold face (bd):              Artificial Fonts.
* implementation differences:            Implementation Differences.
* implicit breaks of lines:              Implicit Line Breaks.
* implicit line breaks:                  Implicit Line Breaks.
* in request, causing implicit linebreak: Manipulating Filling and Adjusting.
* in request, using + and -:             Expressions.
* inch unit (i):                         Measurements.
* including a file (so):                 I/O.
* incompatibilities with AT&T troff:     Implementation Differences.
* increment value without changing the register: Auto-increment.
* increment, automatic:                  Auto-increment.
* indentaion, resetting to default [man]: Man usage.
* indentation (in):                      Line Layout.
* index, in macro package:               Indices.
* indirect assignments:                  Interpolating Registers.
* input and output requests:             I/O.
* input characters and output glyphs, compatibility with AT&T troff: Implementation Differences.
* input characters, invalid:             Identifiers.
* input conventions:                     Input Conventions.
* input encoding, cp1047:                Input Encodings.
* input encoding, EBCDIC:                Input Encodings.
* input encoding, latin-1 (ISO 8859-1):  Input Encodings.
* input encoding, latin-2 (ISO 8859-2):  Input Encodings.
* input encoding, latin-9 (latin-9, ISO 8859-15): Input Encodings.
* input file name, current, register (.F): Built-in Registers.
* input level in delimited arguments:    Implementation Differences.
* input line continuation (\):           Line Control.
* input line number register (.c, c.):   Built-in Registers.
* input line number, setting (lf):       Debugging.
* input line position, horizontal, saving (\k): Page Motions.
* input line trap, setting (it):         Input Line Traps.
* input line traps:                      Input Line Traps.
* input line traps and interrupted lines (itc): Input Line Traps.
* input line, horizontal position, register (hp): Page Motions.
* input stack, backtrace (backtrace):    Debugging.
* input stack, setting limit:            Debugging.
* input token:                           Gtroff Internals.
* input, 8-bit:                          Font File Format.
* input, standard, reading from (rd):    I/O.
* inserting horizontal space (\h):       Page Motions.
* installation:                          Installation.
* interactive use of gtroff:             Debugging.
* intermediate output:                   gtroff Output.
* interpolating registers (\n):          Interpolating Registers.
* interpolation of strings (\*):         Strings.
* interrupted line:                      Line Control.
* interrupted line register (.int):      Line Control.
* interrupted lines and input line traps (itc): Input Line Traps.
* introduction:                          Introduction.
* invalid characters for trf request:    I/O.
* invalid input characters:              Identifiers.
* invocation examples:                   Invocation Examples.
* invoking geqn:                         Invoking geqn.
* invoking ggrn:                         Invoking ggrn.
* invoking gpic:                         Invoking gpic.
* invoking grefer:                       Invoking grefer.
* invoking grodvi:                       Invoking grodvi.
* invoking groff:                        Invoking groff.
* invoking grohtml:                      Invoking grohtml.
* invoking grolbp:                       Invoking grolbp.
* invoking grolj4:                       Invoking grolj4.
* invoking grops:                        Invoking grops.
* invoking grotty:                       Invoking grotty.
* invoking gsoelim:                      Invoking gsoelim.
* invoking gtbl:                         Invoking gtbl.
* invoking gxditview:                    Invoking gxditview.
* ISO 8859-1 (latin-1), input encoding:  Input Encodings.
* ISO 8859-1 (latin-1), output encoding: Groff Options.
* ISO 8859-15 (latin-9, latin-0), input encoding: Input Encodings.
* ISO 8859-2 (latin-2), input encoding:  Input Encodings.
* italic correction (\/):                Ligatures and Kerning.
* italic fonts [man]:                    Man font macros.
* italic glyph, correction after roman glyph (\,): Ligatures and Kerning.
* italic glyph, correction before roman glyph (\/): Ligatures and Kerning.
* justifying text:                       Manipulating Filling and Adjusting.
* justifying text (rj):                  Manipulating Filling and Adjusting.
* keep:                                  Displays.
* keep, floating:                        Displays.
* keeps [ms]:                            ms Displays and Keeps.
* kerning and ligatures:                 Ligatures and Kerning.
* kerning enabled register (.kern):      Ligatures and Kerning.
* kerning, activating (kern):            Ligatures and Kerning.
* kerning, track:                        Ligatures and Kerning.
* landscape page orientation:            Paper Size.
* last glyph, dimensions (.w, .cht, .cdp, .csk): Environments.
* last-requested point size registers (.psr, .sr): Fractional Type Sizes.
* latin-1 (ISO 8859-1), input encoding:  Input Encodings.
* latin-1 (ISO 8859-1), output encoding: Groff Options.
* latin-2 (ISO 8859-2), input encoding:  Input Encodings.
* latin-9 (latin-0, ISO 8859-15), input encoding: Input Encodings.
* layout, line:                          Line Layout.
* layout, page:                          Page Layout.
* lc request, and glyph definitions:     Using Symbols.
* leader character:                      Leaders.
* leader character, and translations:    Character Translations.
* leader character, non-interpreted (\a): Leaders.
* leader repetition character (lc):      Leaders.
* leaders:                               Leaders.
* leading:                               Sizes.
* leading spaces:                        Filling and Adjusting.
* leading spaces with ds:                Strings.
* left italic correction (\,):           Ligatures and Kerning.
* left margin (po):                      Line Layout.
* left margin, how to move [man]:        Man usage.
* length of a string (length):           Strings.
* length of line (ll):                   Line Layout.
* length of page (pl):                   Page Layout.
* length of previous line (.n):          Environments.
* length of title line (lt):             Page Layout.
* letters, form:                         I/O.
* level of warnings (warn):              Debugging.
* ligature:                              Using Symbols.
* ligatures and kerning:                 Ligatures and Kerning.
* ligatures enabled register (.lg):      Ligatures and Kerning.
* ligatures, activating (lg):            Ligatures and Kerning.
* limitations of \b escape:              Drawing Requests.
* line break <1>:                        Manipulating Filling and Adjusting.
* line break <2>:                        Implicit Line Breaks.
* line break:                            Basics.
* line break (br):                       Basics.
* line breaks, with vertical space [man]: Man usage.
* line breaks, without vertical space [man]: Man usage.
* line control:                          Line Control.
* line dimensions:                       Line Layout.
* line drawing glyph:                    Drawing Requests.
* line indentation (in):                 Line Layout.
* line layout:                           Line Layout.
* line length (ll):                      Line Layout.
* line length register (.l):             Line Layout.
* line length, previous (.n):            Environments.
* line number, input, register (.c, c.): Built-in Registers.
* line number, output, register (ln):    Built-in Registers.
* line numbers, printing (nm):           Miscellaneous.
* line space, extra post-vertical (\x):  Changing Type Sizes.
* line space, extra pre-vertical (\x):   Changing Type Sizes.
* line spacing register (.L):            Manipulating Spacing.
* line spacing, post-vertical (pvs):     Changing Type Sizes.
* line thickness (\D't ...'):            Drawing Requests.
* line, blank:                           Implicit Line Breaks.
* line, drawing (\D'l ...'):             Drawing Requests.
* line, empty (sp):                      Basics.
* line, horizontal, drawing (\l):        Drawing Requests.
* line, implicit breaks:                 Implicit Line Breaks.
* line, input, continuation (\):         Line Control.
* line, input, horizontal position, register (hp): Page Motions.
* line, input, horizontal position, saving (\k): Page Motions.
* line, interrupted:                     Line Control.
* line, output, continuation (\c):       Line Control.
* line, output, horizontal position, register (.k): Page Motions.
* line, vertical, drawing (\L):          Drawing Requests.
* line-tabs mode:                        Tabs and Fields.
* lines, blank, disabling:               Manipulating Spacing.
* lines, centering (ce) <1>:             Manipulating Filling and Adjusting.
* lines, centering (ce):                 Basics.
* lines, consecutive hyphenated (hlm):   Manipulating Hyphenation.
* lines, interrupted, and input line traps (itc): Input Line Traps.
* list:                                  Displays.
* list of available glyphs (`groff_char(7)' man page): Using Symbols.
* ll request, using + and -:             Expressions.
* location, vertical, page, marking (mk): Page Motions.
* location, vertical, page, returning to marked (rt): Page Motions.
* logical operators:                     Expressions.
* long names:                            Implementation Differences.
* loops and conditionals:                Conditionals and Loops.
* lq glyph, and lq string [man]:         Predefined man strings.
* ls request, alternative to (pvs):      Changing Type Sizes.
* lt request, using + and -:             Expressions.
* M unit:                                Measurements.
* m unit:                                Measurements.
* machine unit (u):                      Measurements.
* macro arguments:                       Request and Macro Arguments.
* macro basics:                          Basics.
* macro directories:                     Macro Directories.
* macro files, searching:                Macro Directories.
* macro name register (\$0):             Parameters.
* macro names, starting with [ or ], and refer: Identifiers.
* macro packages <1>:                    Macro Packages.
* macro packages:                        Macro Package Intro.
* macro packages, structuring the source code: Requests.
* macro, appending (am):                 Writing Macros.
* macro, arguments (\$):                 Parameters.
* macro, creating alias (als):           Strings.
* macro, end-of-input (em):              End-of-input Traps.
* macro, removing (rm):                  Strings.
* macro, renaming (rn):                  Strings.
* macros:                                Macros.
* macros for manual pages [man]:         Man usage.
* macros, recursive:                     while.
* macros, searching:                     Macro Directories.
* macros, shared name space with strings and diversions: Strings.
* macros, tutorial for users:            Tutorial for Macro Users.
* macros, writing:                       Writing Macros.
* major quotes:                          Displays.
* major version number register (.x):    Built-in Registers.
* man macros:                            Man usage.
* man macros, bold face:                 Man font macros.
* man macros, custom headers and footers: Optional man extensions.
* man macros, default indentation:       Miscellaneous man macros.
* man macros, empty space before a paragraph: Miscellaneous man macros.
* man macros, hanging indentation:       Man usage.
* man macros, how to set fonts:          Man font macros.
* man macros, italic fonts:              Man font macros.
* man macros, line breaks with vertical space: Man usage.
* man macros, line breaks without vertical space: Man usage.
* man macros, moving left margin:        Man usage.
* man macros, resetting default indentation: Man usage.
* man macros, tab stops:                 Miscellaneous man macros.
* man macros, Ultrix-specific:           Optional man extensions.
* man pages:                             man.
* manipulating filling and adjusting:    Manipulating Filling and Adjusting.
* manipulating hyphenation:              Manipulating Hyphenation.
* manipulating spacing:                  Manipulating Spacing.
* manmacros, BSD compatibility:          Miscellaneous man macros.
* manual pages:                          man.
* margin for hyphenation (hym):          Manipulating Hyphenation.
* margin glyph (mc):                     Miscellaneous.
* margin, bottom:                        Page Layout.
* margin, left (po):                     Line Layout.
* margin, top:                           Page Layout.
* mark, high-water, register (.h):       Diversions.
* marking vertical page location (mk):   Page Motions.
* maximum values of Roman numerals:      Assigning Formats.
* mdoc macros:                           mdoc.
* me macro package:                      me.
* measurement unit:                      Measurements.
* measurements:                          Measurements.
* measurements, specifying safely:       Default Units.
* minimum values of Roman numerals:      Assigning Formats.
* minor version number register (.y):    Built-in Registers.
* minutes, current time (minutes):       Built-in Registers.
* mm macro package:                      mm.
* mode for constant glyph space (cs):    Artificial Fonts.
* mode, compatibility:                   Implementation Differences.
* mode, copy-in:                         Copy-in Mode.
* mode, copy-in, and write requests:     I/O.
* mode, fill <1>:                        Warnings.
* mode, fill <2>:                        Manipulating Filling and Adjusting.
* mode, fill:                            Implicit Line Breaks.
* mode, fill (fi):                       Manipulating Filling and Adjusting.
* mode, fill, and \c:                    Line Control.
* mode, line-tabs:                       Tabs and Fields.
* mode, no-fill (nf):                    Manipulating Filling and Adjusting.
* mode, no-fill, and \c:                 Line Control.
* mode, no-space (ns):                   Manipulating Spacing.
* mode, nroff:                           Troff and Nroff Mode.
* mode, safer <1>:                       I/O.
* mode, safer <2>:                       Built-in Registers.
* mode, safer <3>:                       Macro Directories.
* mode, safer:                           Groff Options.
* mode, troff:                           Troff and Nroff Mode.
* mode, unsafe <1>:                      I/O.
* mode, unsafe <2>:                      Built-in Registers.
* mode, unsafe <3>:                      Macro Directories.
* mode, unsafe:                          Groff Options.
* month of the year register (mo):       Built-in Registers.
* motion operators:                      Expressions.
* motion, horizontal (\h):               Page Motions.
* motion, vertical (\v):                 Page Motions.
* motions, page:                         Page Motions.
* mounting font (fp):                    Font Positions.
* ms macros:                             ms.
* ms macros, accent marks:               ms Strings and Special Characters.
* ms macros, body text:                  ms Body Text.
* ms macros, cover page:                 ms Cover Page Macros.
* ms macros, creating table of contents: ms TOC.
* ms macros, differences from AT&T:      Differences from AT&T ms.
* ms macros, displays:                   ms Displays and Keeps.
* ms macros, document control registers: ms Document Control Registers.
* ms macros, equations:                  ms Insertions.
* ms macros, figures:                    ms Insertions.
* ms macros, footers:                    ms Headers and Footers.
* ms macros, footnotes:                  ms Footnotes.
* ms macros, general structure:          General ms Structure.
* ms macros, headers:                    ms Headers and Footers.
* ms macros, headings:                   Headings in ms.
* ms macros, highlighting:               Highlighting in ms.
* ms macros, keeps:                      ms Displays and Keeps.
* ms macros, lists:                      Lists in ms.
* ms macros, margins:                    ms Margins.
* ms macros, multiple columns:           ms Multiple Columns.
* ms macros, nested lists:               Lists in ms.
* ms macros, page layout:                ms Page Layout.
* ms macros, paragraph handling:         Paragraphs in ms.
* ms macros, references:                 ms Insertions.
* ms macros, special characters:         ms Strings and Special Characters.
* ms macros, strings:                    ms Strings and Special Characters.
* ms macros, tables:                     ms Insertions.
* multi-file documents:                  Debugging.
* multi-line strings:                    Strings.
* multi-page table, example markup [ms]: Example multi-page table.
* multiple columns [ms]:                 ms Multiple Columns.
* n unit:                                Measurements.
* name space, common, of macros, diversions, and strings: Strings.
* name, background color, register (.M): Colors.
* name, drawing color, register (.m):    Colors.
* named character (\C):                  Using Symbols.
* names, long:                           Implementation Differences.
* ne request, and the .trunc register:   Page Location Traps.
* ne request, comparison with sv:        Page Control.
* negating register values:              Setting Registers.
* nested assignments:                    Interpolating Registers.
* nested diversions:                     Diversions.
* nested lists [ms]:                     Lists in ms.
* new page (bp) <1>:                     Page Control.
* new page (bp):                         Basics.
* newline character <1>:                 Escapes.
* newline character:                     Identifiers.
* newline character, and translations:   Character Translations.
* newline character, in strings, escaping: Strings.
* newline, final, stripping in diversions: Strings.
* next file, processing (nx):            I/O.
* next free font position register (.fp): Font Positions.
* nf request, causing implicit linebreak: Manipulating Filling and Adjusting.
* nl register, and .d:                   Diversions.
* nl register, difference to .h:         Diversions.
* nm request, using + and -:             Expressions.
* no-break control character ('):        Requests.
* no-break control character, changing (c2): Character Translations.
* no-fill mode (nf):                     Manipulating Filling and Adjusting.
* no-fill mode, and \c:                  Line Control.
* no-space mode (ns):                    Manipulating Spacing.
* node, output:                          Gtroff Internals.
* nr request, and warnings:              Warnings.
* nr request, using + and -:             Expressions.
* nroff mode:                            Troff and Nroff Mode.
* nroff, the program:                    History.
* number of arguments register (.$):     Parameters.
* number register, creating alias (aln): Setting Registers.
* number register, removing (rr):        Setting Registers.
* number register, renaming (rnn):       Setting Registers.
* number registers, dumping (pnr):       Debugging.
* number, input line, setting (lf):      Debugging.
* number, page (pn):                     Page Layout.
* numbered glyph (\N) <1>:               Using Symbols.
* numbered glyph (\N):                   Character Translations.
* numbered list, example markup [ms]:    Lists in ms.
* numbers, and delimiters:               Escapes.
* numbers, line, printing (nm):          Miscellaneous.
* numerals, Roman:                       Assigning Formats.
* numeric expression, valid:             Expressions.
* offset, page (po):                     Line Layout.
* open request, and safer mode:          Groff Options.
* opena request, and safer mode:         Groff Options.
* opening file (open):                   I/O.
* operator, scaling:                     Expressions.
* operators, arithmetic:                 Expressions.
* operators, as delimiters:              Escapes.
* operators, comparison:                 Expressions.
* operators, extremum (>?, <?):          Expressions.
* operators, logical:                    Expressions.
* operators, motion:                     Expressions.
* operators, unary:                      Expressions.
* options:                               Groff Options.
* order of evaluation in expressions:    Expressions.
* orientation, landscape:                Paper Size.
* orphan lines, preventing with ne:      Page Control.
* os request, and no-space mode:         Page Control.
* output and input requests:             I/O.
* output device name string register (.T) <1>: Built-in Registers.
* output device name string register (.T): Groff Options.
* output device usage number register (.T): Groff Options.
* output devices <1>:                    Output Devices.
* output devices:                        Output device intro.
* output encoding, ASCII:                Groff Options.
* output encoding, cp1047:               Groff Options.
* output encoding, EBCDIC:               Groff Options.
* output encoding, latin-1 (ISO 8859-1): Groff Options.
* output encoding, utf-8:                Groff Options.
* output glyphs, and input characters,compatibility with AT&T troff: Implementation Differences.
* output line number register (ln):      Built-in Registers.
* output line, continuation (\c):        Line Control.
* output line, horizontal position, register (.k): Page Motions.
* output node:                           Gtroff Internals.
* output request, and \!:                Diversions.
* output, flush (fl):                    Debugging.
* output, gtroff:                        gtroff Output.
* output, intermediate:                  gtroff Output.
* output, suppressing (\O):              Suppressing output.
* output, transparent (\!, \?):          Diversions.
* output, transparent (cf, trf):         I/O.
* output, transparent, incompatibilities with AT&T troff: Implementation Differences.
* output, troff:                         gtroff Output.
* overlapping characters:                Using Symbols.
* overstriking glyphs (\o):              Page Motions.
* P unit:                                Measurements.
* p unit:                                Measurements.
* packages, macros:                      Macro Packages.
* padding character, for fields (fc):    Fields.
* page break, conditional (ne):          Page Control.
* page control:                          Page Control.
* page ejecting register (.pe):          Page Location Traps.
* page footers:                          Page Location Traps.
* page headers:                          Page Location Traps.
* page layout:                           Page Layout.
* page layout [ms]:                      ms Page Layout.
* page length (pl):                      Page Layout.
* page length register (.p):             Page Layout.
* page location traps:                   Page Location Traps.
* page location, vertical, marking (mk): Page Motions.
* page location, vertical, returning to marked (rt): Page Motions.
* page motions:                          Page Motions.
* page number (pn):                      Page Layout.
* page number character (%):             Page Layout.
* page number character, changing (pc):  Page Layout.
* page number register (%):              Page Control.
* page offset (po):                      Line Layout.
* page orientation, landscape:           Paper Size.
* page, new (bp):                        Page Control.
* paper formats:                         Paper Formats.
* paper size:                            Paper Size.
* paragraphs:                            Paragraphs.
* parameters:                            Parameters.
* parentheses:                           Expressions.
* path, for font files:                  Font Directories.
* path, for tmac files:                  Macro Directories.
* patterns for hyphenation (hpf):        Manipulating Hyphenation.
* pi request, and groff:                 I/O.
* pi request, and safer mode:            Groff Options.
* pic, the program:                      gpic.
* pica unit (P):                         Measurements.
* pile, glyph (\b):                      Drawing Requests.
* pl request, using + and -:             Expressions.
* planting a trap:                       Traps.
* platform-specific directory:           Macro Directories.
* pn request, using + and -:             Expressions.
* po request, using + and -:             Expressions.
* point size registers (.s, .ps):        Changing Type Sizes.
* point size registers, last-requested (.psr, .sr): Fractional Type Sizes.
* point sizes, changing (ps, \s):        Changing Type Sizes.
* point sizes, fractional <1>:           Implementation Differences.
* point sizes, fractional:               Fractional Type Sizes.
* point unit (p):                        Measurements.
* polygon, drawing (\D'p ...'):          Drawing Requests.
* polygon, solid, drawing (\D'P ...'):   Drawing Requests.
* position of lowest text line (.h):     Diversions.
* position, absolute, operator (|):      Expressions.
* position, horizontal input line, saving (\k): Page Motions.
* position, horizontal, in input line, register (hp): Page Motions.
* position, horizontal, in output line, register (.k): Page Motions.
* position, vertical, current (nl):      Page Control.
* position, vertical, in diversion, register (.d): Diversions.
* positions, font:                       Font Positions.
* post-vertical line spacing:            Changing Type Sizes.
* post-vertical line spacing register (.pvs): Changing Type Sizes.
* post-vertical line spacing, changing (pvs): Changing Type Sizes.
* postprocessor access:                  Postprocessor Access.
* postprocessors:                        Output device intro.
* PostScript fonts:                      Font Families.
* PostScript, bounding box:              Miscellaneous.
* PostScript, embedding:                 Embedding PostScript.
* prefix, for commands:                  Environment.
* preprocessor, calling convention:      Preprocessors in man pages.
* preprocessors <1>:                     Preprocessors.
* preprocessors:                         Preprocessor Intro.
* previous font (ft, \f[], \fP):         Changing Fonts.
* previous line length (.n):             Environments.
* print current page register (.P):      Groff Options.
* printing backslash (\\, \e, \E, \[rs]) <1>: Implementation Differences.
* printing backslash (\\, \e, \E, \[rs]): Escapes.
* printing line numbers (nm):            Miscellaneous.
* printing to stderr (tm, tm1, tmc):     Debugging.
* printing, zero-width (\z, \Z):         Page Motions.
* process ID of gtroff register ($$):    Built-in Registers.
* processing next file (nx):             I/O.
* properties of characters (cflags):     Using Symbols.
* properties of glyphs (cflags):         Using Symbols.
* ps request, and constant glyph space mode: Artificial Fonts.
* ps request, incompatibilities with AT&T troff: Implementation Differences.
* ps request, using + and -:             Expressions.
* ps request, with fractional type sizes: Fractional Type Sizes.
* pso request, and safer mode:           Groff Options.
* pvs request, using + and -:            Expressions.
* quotes, major:                         Displays.
* quotes, trailing:                      Strings.
* radicalex glyph, and cflags:           Using Symbols.
* ragged-left:                           Manipulating Filling and Adjusting.
* ragged-right:                          Manipulating Filling and Adjusting.
* rc request, and glyph definitions:     Using Symbols.
* read-only register, changing format:   Assigning Formats.
* reading from standard input (rd):      I/O.
* recursive macros:                      while.
* refer, and macro names starting with [ or ]: Identifiers.
* refer, the program:                    grefer.
* reference, gtroff:                     gtroff Reference.
* references [ms]:                       ms Insertions.
* register, creating alias (aln):        Setting Registers.
* register, format (\g):                 Assigning Formats.
* register, removing (rr):               Setting Registers.
* register, renaming (rnn):              Setting Registers.
* registers:                             Registers.
* registers specific to grohtml:         grohtml specific registers and strings.
* registers, built-in:                   Built-in Registers.
* registers, interpolating (\n):         Interpolating Registers.
* registers, setting (nr, \R):           Setting Registers.
* removing diversion (rm):               Strings.
* removing glyph definition (rchar, rfschar): Using Symbols.
* removing macro (rm):                   Strings.
* removing number register (rr):         Setting Registers.
* removing request (rm):                 Strings.
* removing string (rm):                  Strings.
* renaming diversion (rn):               Strings.
* renaming macro (rn):                   Strings.
* renaming number register (rnn):        Setting Registers.
* renaming request (rn):                 Strings.
* renaming string (rn):                  Strings.
* request arguments:                     Request and Macro Arguments.
* request, removing (rm):                Strings.
* request, renaming (rn):                Strings.
* request, undefined:                    Comments.
* requests:                              Requests.
* requests for drawing:                  Drawing Requests.
* requests for input and output:         I/O.
* resolution, device:                    DESC File Format.
* resolution, horizontal:                DESC File Format.
* resolution, horizontal, register (.H): Built-in Registers.
* resolution, vertical:                  DESC File Format.
* resolution, vertical, register (.V):   Built-in Registers.
* returning to marked vertical page location (rt): Page Motions.
* revision number register (.Y):         Built-in Registers.
* rf, the program:                       History.
* right-justifying (rj):                 Manipulating Filling and Adjusting.
* rj request, causing implicit linebreak: Manipulating Filling and Adjusting.
* rn glyph, and cflags:                  Using Symbols.
* roff, the program:                     History.
* roman glyph, correction after italic glyph (\/): Ligatures and Kerning.
* roman glyph, correction before italic glyph (\,): Ligatures and Kerning.
* Roman numerals:                        Assigning Formats.
* Roman numerals, maximum and minimum:   Assigning Formats.
* rq glyph, and rq string [man]:         Predefined man strings.
* rq glyph, at end of sentence <1>:      Using Symbols.
* rq glyph, at end of sentence:          Sentences.
* rt request, using + and -:             Expressions.
* ru glyph, and cflags:                  Using Symbols.
* runoff, the program:                   History.
* s unit <1>:                            Fractional Type Sizes.
* s unit:                                Measurements.
* safer mode <1>:                        I/O.
* safer mode <2>:                        Built-in Registers.
* safer mode <3>:                        Macro Directories.
* safer mode:                            Groff Options.
* saving horizontal input line position (\k): Page Motions.
* scaling operator:                      Expressions.
* searching fonts:                       Font Directories.
* searching macro files:                 Macro Directories.
* searching macros:                      Macro Directories.
* seconds, current time (seconds):       Built-in Registers.
* sentence space:                        Sentences.
* sentence space size register (.sss):   Manipulating Filling and Adjusting.
* sentences:                             Sentences.
* setting diversion trap (dt):           Diversion Traps.
* setting end-of-input trap (em):        End-of-input Traps.
* setting input line number (lf):        Debugging.
* setting input line trap (it):          Input Line Traps.
* setting registers (nr, \R):            Setting Registers.
* shading filled objects (\D'f ...'):    Drawing Requests.
* shc request, and translations:         Character Translations.
* site-specific directory <1>:           Font Directories.
* site-specific directory:               Macro Directories.
* size of sentence space register (.sss): Manipulating Filling and Adjusting.
* size of type:                          Sizes.
* size of word space register (.ss):     Manipulating Filling and Adjusting.
* size, paper:                           Paper Size.
* sizes:                                 Sizes.
* sizes, fractional <1>:                 Implementation Differences.
* sizes, fractional:                     Fractional Type Sizes.
* skew, of last glyph (.csk):            Environments.
* slant, font, changing (\S):            Artificial Fonts.
* soelim, the program:                   gsoelim.
* soft hyphen character, setting (shc):  Manipulating Hyphenation.
* soft hyphen glyph (hy):                Manipulating Hyphenation.
* solid circle, drawing (\D'C ...'):     Drawing Requests.
* solid ellipse, drawing (\D'E ...'):    Drawing Requests.
* solid polygon, drawing (\D'P ...'):    Drawing Requests.
* sp request, and no-space mode:         Manipulating Spacing.
* sp request, and traps:                 Manipulating Spacing.
* sp request, causing implicit linebreak: Manipulating Filling and Adjusting.
* space between sentences:               Sentences.
* space between sentences register (.sss): Manipulating Filling and Adjusting.
* space between words register (.ss):    Manipulating Filling and Adjusting.
* space character:                       Escapes.
* space character, zero width (\&) <1>:  Drawing Requests.
* space character, zero width (\&) <2>:  Ligatures and Kerning.
* space character, zero width (\&):      Requests.
* space characters, in expressions:      Expressions.
* space, discardable, horizontal:        Manipulating Filling and Adjusting.
* space, discarded, in traps:            Manipulating Spacing.
* space, horizontal (\h):                Page Motions.
* space, horizontal, unformatting:       Strings.
* space, unbreakable:                    Page Motions.
* space, vertical, unit (v):             Measurements.
* space, width of a digit (\0):          Page Motions.
* spaces with ds:                        Strings.
* spaces, in a macro argument:           Request and Macro Arguments.
* spaces, leading and trailing:          Filling and Adjusting.
* spacing:                               Basics.
* spacing, manipulating:                 Manipulating Spacing.
* spacing, vertical:                     Sizes.
* special characters <1>:                Special Characters.
* special characters:                    Character Translations.
* special characters [ms]:               ms Strings and Special Characters.
* special fonts <1>:                     Font File Format.
* special fonts <2>:                     Special Fonts.
* special fonts:                         Using Symbols.
* special fonts, emboldening:            Artificial Fonts.
* special request, and font translations: Changing Fonts.
* special request, and glyph search order: Using Symbols.
* spline, drawing (\D'~ ...'):           Drawing Requests.
* springing a trap:                      Traps.
* sqrtex glyph, and cflags:              Using Symbols.
* stacking glyphs (\b):                  Drawing Requests.
* standard input, reading from (rd):     I/O.
* stderr, printing to (tm, tm1, tmc):    Debugging.
* stops, tabulator:                      Tab Stops.
* string arguments:                      Strings.
* string expansion (\*):                 Strings.
* string interpolation (\*):             Strings.
* string, appending (as):                Strings.
* string, creating alias (als):          Strings.
* string, length of (length):            Strings.
* string, removing (rm):                 Strings.
* string, renaming (rn):                 Strings.
* strings:                               Strings.
* strings [ms]:                          ms Strings and Special Characters.
* strings specific to grohtml:           grohtml specific registers and strings.
* strings, multi-line:                   Strings.
* strings, shared name space with macros and diversions: Strings.
* stripping final newline in diversions: Strings.
* structuring source code of documents or macro packages: Requests.
* sty request, and changing fonts:       Changing Fonts.
* sty request, and font positions:       Font Positions.
* sty request, and font translations:    Changing Fonts.
* styles, font:                          Font Families.
* substring (substring):                 Strings.
* suppressing output (\O):               Suppressing output.
* sv request, and no-space mode:         Page Control.
* switching environments (ev):           Environments.
* sy request, and safer mode:            Groff Options.
* symbol:                                Using Symbols.
* symbol table, dumping (pm):            Debugging.
* symbol, defining (char):               Using Symbols.
* symbols, using:                        Using Symbols.
* system() return value register (systat): I/O.
* tab character <1>:                     Escapes.
* tab character:                         Tab Stops.
* tab character, and translations:       Character Translations.
* tab character, non-interpreted (\t):   Tabs and Fields.
* tab repetition character (tc):         Tabs and Fields.
* tab settings register (.tabs):         Tabs and Fields.
* tab stops:                             Tab Stops.
* tab stops [man]:                       Miscellaneous man macros.
* tab stops, for TTY output devices:     Tabs and Fields.
* tab, line-tabs mode:                   Tabs and Fields.
* table of contents <1>:                 Leaders.
* table of contents:                     Table of Contents.
* table of contents, creating [ms]:      ms TOC.
* tables [ms]:                           ms Insertions.
* tabs, and fields:                      Tabs and Fields.
* tabs, before comments:                 Comments.
* tbl, the program:                      gtbl.
* text line, position of lowest (.h):    Diversions.
* text, gtroff processing:               Text.
* text, justifying:                      Manipulating Filling and Adjusting.
* text, justifying (rj):                 Manipulating Filling and Adjusting.
* thickness of lines (\D't ...'):        Drawing Requests.
* three-part title (tl):                 Page Layout.
* ti request, causing implicit linebreak: Manipulating Filling and Adjusting.
* ti request, using + and -:             Expressions.
* time, current:                         I/O.
* time, current, hours (hours):          Built-in Registers.
* time, current, minutes (minutes):      Built-in Registers.
* time, current, seconds (seconds):      Built-in Registers.
* title line (tl):                       Page Layout.
* title line length register (.lt):      Page Layout.
* title line, length (lt):               Page Layout.
* title page, example markup:            ms Cover Page Macros.
* titles:                                Page Layout.
* tkf request, and font styles:          Font Families.
* tkf request, and font translations:    Changing Fonts.
* tkf request, with fractional type sizes: Fractional Type Sizes.
* tl request, and mc:                    Miscellaneous.
* tmac, directory:                       Macro Directories.
* tmac, path:                            Macro Directories.
* TMPDIR, environment variable:          Environment.
* token, input:                          Gtroff Internals.
* top margin:                            Page Layout.
* top-level diversion:                   Diversions.
* top-level diversion, and \!:           Diversions.
* top-level diversion, and \?:           Diversions.
* top-level diversion, and bp:           Page Control.
* tr request, and glyph definitions:     Using Symbols.
* tr request, and soft hyphen character: Manipulating Hyphenation.
* tr request, incompatibilities with AT&T troff: Implementation Differences.
* track kerning:                         Ligatures and Kerning.
* track kerning, activating (tkf):       Ligatures and Kerning.
* trailing quotes:                       Strings.
* trailing spaces:                       Filling and Adjusting.
* translations of characters:            Character Translations.
* transparent characters <1>:            Using Symbols.
* transparent characters:                Sentences.
* transparent output (\!, \?):           Diversions.
* transparent output (cf, trf):          I/O.
* transparent output, incompatibilities with AT&T troff: Implementation Differences.
* trap, changing location (ch):          Page Location Traps.
* trap, distance, register (.t):         Page Location Traps.
* trap, diversion, setting (dt):         Diversion Traps.
* trap, end-of-input, setting (em):      End-of-input Traps.
* trap, input line, setting (it):        Input Line Traps.
* trap, planting:                        Traps.
* trap, springing:                       Traps.
* traps:                                 Traps.
* traps, and discarded space:            Manipulating Spacing.
* traps, and diversions:                 Page Location Traps.
* traps, blank line:                     Blank Line Traps.
* traps, diversion:                      Diversion Traps.
* traps, dumping (ptr):                  Debugging.
* traps, end-of-input:                   End-of-input Traps.
* traps, input line:                     Input Line Traps.
* traps, input line, and interrupted lines (itc): Input Line Traps.
* traps, page location:                  Page Location Traps.
* traps, sprung by bp request (.pe):     Page Location Traps.
* trf request, and invalid characters:   I/O.
* trf request, causing implicit linebreak: Manipulating Filling and Adjusting.
* trin request, and asciify:             Diversions.
* troff mode:                            Troff and Nroff Mode.
* troff output:                          gtroff Output.
* truncated vertical space register (.trunc): Page Location Traps.
* tutorial for macro users:              Tutorial for Macro Users.
* type size:                             Sizes.
* type size registers (.s, .ps):         Changing Type Sizes.
* type sizes, changing (ps, \s):         Changing Type Sizes.
* type sizes, fractional <1>:            Implementation Differences.
* type sizes, fractional:                Fractional Type Sizes.
* u unit:                                Measurements.
* uf request, and font styles:           Font Families.
* ul glyph, and cflags:                  Using Symbols.
* ul request, and font translations:     Changing Fonts.
* Ultrix-specific man macros:            Optional man extensions.
* unary operators:                       Expressions.
* unbreakable space:                     Page Motions.
* undefined identifiers:                 Identifiers.
* undefined request:                     Comments.
* underline font (uf):                   Artificial Fonts.
* underlining (ul):                      Artificial Fonts.
* underlining, continuous (cu):          Artificial Fonts.
* underscore glyph (\[ru]):              Drawing Requests.
* unformatting diversions (asciify):     Diversions.
* unformatting horizontal space:         Strings.
* Unicode <1>:                           Using Symbols.
* Unicode:                               Identifiers.
* unit, c:                               Measurements.
* unit, f:                               Measurements.
* unit, f, and colors:                   Colors.
* unit, i:                               Measurements.
* unit, M:                               Measurements.
* unit, m:                               Measurements.
* unit, n:                               Measurements.
* unit, P:                               Measurements.
* unit, p:                               Measurements.
* unit, s <1>:                           Fractional Type Sizes.
* unit, s:                               Measurements.
* unit, u:                               Measurements.
* unit, v:                               Measurements.
* unit, z <1>:                           Fractional Type Sizes.
* unit, z:                               Measurements.
* units of measurement:                  Measurements.
* units, default:                        Default Units.
* unnamed fill colors (\D'F...'):        Drawing Requests.
* unnamed glyphs:                        Using Symbols.
* unnamed glyphs, accessing with \N:     Font File Format.
* unsafe mode <1>:                       I/O.
* unsafe mode <2>:                       Built-in Registers.
* unsafe mode <3>:                       Macro Directories.
* unsafe mode:                           Groff Options.
* user's macro tutorial:                 Tutorial for Macro Users.
* user's tutorial for macros:            Tutorial for Macro Users.
* using symbols:                         Using Symbols.
* utf-8, output encoding:                Groff Options.
* v unit:                                Measurements.
* valid numeric expression:              Expressions.
* value, incrementing without changing the register: Auto-increment.
* variables in environment:              Environment.
* version number, major, register (.x):  Built-in Registers.
* version number, minor, register (.y):  Built-in Registers.
* vertical line drawing (\L):            Drawing Requests.
* vertical line spacing register (.v):   Changing Type Sizes.
* vertical line spacing, changing (vs):  Changing Type Sizes.
* vertical line spacing, effective value: Changing Type Sizes.
* vertical motion (\v):                  Page Motions.
* vertical page location, marking (mk):  Page Motions.
* vertical page location, returning to marked (rt): Page Motions.
* vertical position in diversion register (.d): Diversions.
* vertical position trap enable register (.vpt): Page Location Traps.
* vertical position traps, enabling (vpt): Page Location Traps.
* vertical position, current (nl):       Page Control.
* vertical resolution:                   DESC File Format.
* vertical resolution register (.V):     Built-in Registers.
* vertical space unit (v):               Measurements.
* vertical spacing:                      Sizes.
* warnings <1>:                          Warnings.
* warnings:                              Debugging.
* warnings, level (warn):                Debugging.
* what is groff?:                        What Is groff?.
* while:                                 while.
* while request, and the ! operator:     Expressions.
* while request, confusing with br:      while.
* while request, operators to use with:  Operators in Conditionals.
* whitespace characters:                 Identifiers.
* width escape (\w):                     Page Motions.
* width, of last glyph (.w):             Environments.
* word space size register (.ss):        Manipulating Filling and Adjusting.
* writing macros:                        Writing Macros.
* writing to file (write):               I/O.
* year, current, register (year, yr):    Built-in Registers.
* z unit <1>:                            Fractional Type Sizes.
* z unit:                                Measurements.
* zero width space character (\&) <1>:   Drawing Requests.
* zero width space character (\&) <2>:   Ligatures and Kerning.
* zero width space character (\&):       Requests.
* zero-width printing (\z, \Z):          Page Motions.
* |, and page motion:                    Expressions.


